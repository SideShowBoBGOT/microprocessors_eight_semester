
Panchenko_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08005be0  08005be0  00006be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e14  08005e14  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e14  08005e14  00006e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e1c  08005e1c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005e24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027cc  2000005c  08005e80  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002828  08005e80  00007828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e385  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c2  00000000  00000000  0001540a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000176d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afe  00000000  00000000  000184d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018724  00000000  00000000  00018fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106b0  00000000  00000000  000316fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9e6  00000000  00000000  00041daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f4  00000000  00000000  000d17d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d5bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005bc8 	.word	0x08005bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005bc8 	.word	0x08005bc8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <uart_send_dma>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_send_dma(const char* str) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  if (!uart_busy && uart_q_count == 0) {
 8000178:	4b2e      	ldr	r3, [pc, #184]	@ (8000234 <uart_send_dma+0xc4>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b00      	cmp	r3, #0
 8000180:	d12a      	bne.n	80001d8 <uart_send_dma+0x68>
 8000182:	4b2d      	ldr	r3, [pc, #180]	@ (8000238 <uart_send_dma+0xc8>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d126      	bne.n	80001d8 <uart_send_dma+0x68>
    tx_len = strlen(str);
 800018a:	6878      	ldr	r0, [r7, #4]
 800018c:	f7ff ffe8 	bl	8000160 <strlen>
 8000190:	4603      	mov	r3, r0
 8000192:	b29a      	uxth	r2, r3
 8000194:	4b29      	ldr	r3, [pc, #164]	@ (800023c <uart_send_dma+0xcc>)
 8000196:	801a      	strh	r2, [r3, #0]
    if (tx_len == 0 || tx_len >= sizeof(tx_buf)) return;
 8000198:	4b28      	ldr	r3, [pc, #160]	@ (800023c <uart_send_dma+0xcc>)
 800019a:	881b      	ldrh	r3, [r3, #0]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d045      	beq.n	800022c <uart_send_dma+0xbc>
 80001a0:	4b26      	ldr	r3, [pc, #152]	@ (800023c <uart_send_dma+0xcc>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80001a6:	d841      	bhi.n	800022c <uart_send_dma+0xbc>
    memcpy(tx_buf, str, tx_len);
 80001a8:	4b24      	ldr	r3, [pc, #144]	@ (800023c <uart_send_dma+0xcc>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	461a      	mov	r2, r3
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	4823      	ldr	r0, [pc, #140]	@ (8000240 <uart_send_dma+0xd0>)
 80001b2:	f004 fc39 	bl	8004a28 <memcpy>
    tx_buf[tx_len] = '\0';
 80001b6:	4b21      	ldr	r3, [pc, #132]	@ (800023c <uart_send_dma+0xcc>)
 80001b8:	881b      	ldrh	r3, [r3, #0]
 80001ba:	461a      	mov	r2, r3
 80001bc:	4b20      	ldr	r3, [pc, #128]	@ (8000240 <uart_send_dma+0xd0>)
 80001be:	2100      	movs	r1, #0
 80001c0:	5499      	strb	r1, [r3, r2]
    uart_busy = 1;
 80001c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000234 <uart_send_dma+0xc4>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)tx_buf, tx_len);
 80001c8:	4b1c      	ldr	r3, [pc, #112]	@ (800023c <uart_send_dma+0xcc>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	461a      	mov	r2, r3
 80001ce:	491c      	ldr	r1, [pc, #112]	@ (8000240 <uart_send_dma+0xd0>)
 80001d0:	481c      	ldr	r0, [pc, #112]	@ (8000244 <uart_send_dma+0xd4>)
 80001d2:	f003 fc5f 	bl	8003a94 <HAL_UART_Transmit_DMA>
 80001d6:	e02a      	b.n	800022e <uart_send_dma+0xbe>
  }
  else if (uart_q_count < UART_QUEUE_LEN) {
 80001d8:	4b17      	ldr	r3, [pc, #92]	@ (8000238 <uart_send_dma+0xc8>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b07      	cmp	r3, #7
 80001de:	d826      	bhi.n	800022e <uart_send_dma+0xbe>
    strncpy(uart_queue[uart_q_tail], str, UART_LINE_LEN - 1);
 80001e0:	4b19      	ldr	r3, [pc, #100]	@ (8000248 <uart_send_dma+0xd8>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	4a19      	ldr	r2, [pc, #100]	@ (800024c <uart_send_dma+0xdc>)
 80001e8:	4413      	add	r3, r2
 80001ea:	227f      	movs	r2, #127	@ 0x7f
 80001ec:	6879      	ldr	r1, [r7, #4]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f004 fbdb 	bl	80049aa <strncpy>
    uart_queue[uart_q_tail][UART_LINE_LEN - 1] = '\0';
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <uart_send_dma+0xd8>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	4a14      	ldr	r2, [pc, #80]	@ (800024c <uart_send_dma+0xdc>)
 80001fa:	01db      	lsls	r3, r3, #7
 80001fc:	4413      	add	r3, r2
 80001fe:	337f      	adds	r3, #127	@ 0x7f
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
    uart_q_tail = (uart_q_tail + 1) % UART_QUEUE_LEN;
 8000204:	4b10      	ldr	r3, [pc, #64]	@ (8000248 <uart_send_dma+0xd8>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	425a      	negs	r2, r3
 800020c:	f003 0307 	and.w	r3, r3, #7
 8000210:	f002 0207 	and.w	r2, r2, #7
 8000214:	bf58      	it	pl
 8000216:	4253      	negpl	r3, r2
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <uart_send_dma+0xd8>)
 800021c:	701a      	strb	r2, [r3, #0]
    uart_q_count++;
 800021e:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <uart_send_dma+0xc8>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	3301      	adds	r3, #1
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <uart_send_dma+0xc8>)
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e000      	b.n	800022e <uart_send_dma+0xbe>
    if (tx_len == 0 || tx_len >= sizeof(tx_buf)) return;
 800022c:	bf00      	nop
  }
}
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200022ca 	.word	0x200022ca
 8000238:	200026ce 	.word	0x200026ce
 800023c:	200022c8 	.word	0x200022c8
 8000240:	20002208 	.word	0x20002208
 8000244:	20000134 	.word	0x20000134
 8000248:	200026cd 	.word	0x200026cd
 800024c:	200022cc 	.word	0x200022cc

08000250 <StartLedPWM>:

volatile uint8_t pwm_active = 0;
uint32_t pwm_end_time = 0;

void StartLedPWM(uint8_t brightness_percent, uint32_t duration_ms)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	71fb      	strb	r3, [r7, #7]
    if (brightness_percent > 100) brightness_percent = 100;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b64      	cmp	r3, #100	@ 0x64
 8000260:	d901      	bls.n	8000266 <StartLedPWM+0x16>
 8000262:	2364      	movs	r3, #100	@ 0x64
 8000264:	71fb      	strb	r3, [r7, #7]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000278:	2302      	movs	r3, #2
 800027a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027c:	2302      	movs	r3, #2
 800027e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	4619      	mov	r1, r3
 8000286:	480c      	ldr	r0, [pc, #48]	@ (80002b8 <StartLedPWM+0x68>)
 8000288:	f001 fe5c 	bl	8001f44 <HAL_GPIO_Init>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800028c:	2100      	movs	r1, #0
 800028e:	480b      	ldr	r0, [pc, #44]	@ (80002bc <StartLedPWM+0x6c>)
 8000290:	f002 fd62 	bl	8002d58 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness_percent);
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <StartLedPWM+0x6c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	79fa      	ldrb	r2, [r7, #7]
 800029a:	635a      	str	r2, [r3, #52]	@ 0x34

    pwm_active = 1;
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <StartLedPWM+0x70>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
    pwm_end_time = HAL_GetTick() + duration_ms;
 80002a2:	f000 ff03 	bl	80010ac <HAL_GetTick>
 80002a6:	4602      	mov	r2, r0
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	4413      	add	r3, r2
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <StartLedPWM+0x74>)
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40010800 	.word	0x40010800
 80002bc:	200000ec 	.word	0x200000ec
 80002c0:	200026d1 	.word	0x200026d1
 80002c4:	200026d4 	.word	0x200026d4

080002c8 <UpdateLedPWM>:

void UpdateLedPWM()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
    if (pwm_active && HAL_GetTick() >= pwm_end_time)
 80002ce:	4b17      	ldr	r3, [pc, #92]	@ (800032c <UpdateLedPWM+0x64>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d025      	beq.n	8000324 <UpdateLedPWM+0x5c>
 80002d8:	f000 fee8 	bl	80010ac <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <UpdateLedPWM+0x68>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d31e      	bcc.n	8000324 <UpdateLedPWM+0x5c>
    {
        HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80002e6:	2100      	movs	r1, #0
 80002e8:	4812      	ldr	r0, [pc, #72]	@ (8000334 <UpdateLedPWM+0x6c>)
 80002ea:	f002 fdd7 	bl	8002e9c <HAL_TIM_PWM_Stop>

        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	463b      	mov	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002fa:	2301      	movs	r3, #1
 80002fc:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fe:	2301      	movs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000306:	2302      	movs	r3, #2
 8000308:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030a:	463b      	mov	r3, r7
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	@ (8000338 <UpdateLedPWM+0x70>)
 8000310:	f001 fe18 	bl	8001f44 <HAL_GPIO_Init>

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2101      	movs	r1, #1
 8000318:	4807      	ldr	r0, [pc, #28]	@ (8000338 <UpdateLedPWM+0x70>)
 800031a:	f001 ff97 	bl	800224c <HAL_GPIO_WritePin>

        pwm_active = 0;
 800031e:	4b03      	ldr	r3, [pc, #12]	@ (800032c <UpdateLedPWM+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
    }
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200026d1 	.word	0x200026d1
 8000330:	200026d4 	.word	0x200026d4
 8000334:	200000ec 	.word	0x200000ec
 8000338:	40010800 	.word	0x40010800

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000340:	f000 fe5c 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000344:	f000 f828 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000348:	f000 f996 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 800034c:	f000 f96e 	bl	800062c <MX_DMA_Init>
  MX_ADC1_Init();
 8000350:	f000 f87e 	bl	8000450 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000354:	f000 f916 	bl	8000584 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000358:	f000 f93e 	bl	80005d8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800035c:	f000 f89e 	bl	800049c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000364:	4907      	ldr	r1, [pc, #28]	@ (8000384 <main+0x48>)
 8000366:	4808      	ldr	r0, [pc, #32]	@ (8000388 <main+0x4c>)
 8000368:	f000 ff82 	bl	8001270 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart3, &uart3_rx_byte, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	4907      	ldr	r1, [pc, #28]	@ (800038c <main+0x50>)
 8000370:	4807      	ldr	r0, [pc, #28]	@ (8000390 <main+0x54>)
 8000372:	f003 fb6a 	bl	8003a4a <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000376:	2100      	movs	r1, #0
 8000378:	4806      	ldr	r0, [pc, #24]	@ (8000394 <main+0x58>)
 800037a:	f002 fced 	bl	8002d58 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UpdateLedPWM();
 800037e:	f7ff ffa3 	bl	80002c8 <UpdateLedPWM>
 8000382:	e7fc      	b.n	800037e <main+0x42>
 8000384:	20000208 	.word	0x20000208
 8000388:	20000078 	.word	0x20000078
 800038c:	200022cb 	.word	0x200022cb
 8000390:	2000017c 	.word	0x2000017c
 8000394:	200000ec 	.word	0x200000ec

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b094      	sub	sp, #80	@ 0x50
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003a2:	2228      	movs	r2, #40	@ 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 fad6 	bl	8004958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	f107 0314 	add.w	r3, r7, #20
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c8:	2301      	movs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d6:	2301      	movs	r3, #1
 80003d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 ff44 	bl	800227c <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fa:	f000 fb87 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2302      	movs	r3, #2
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800040e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f002 f9b0 	bl	8002780 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000426:	f000 fb71 	bl	8000b0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800042a:	2302      	movs	r3, #2
 800042c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800042e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000432:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4618      	mov	r0, r3
 8000438:	f002 fb30 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000442:	f000 fb63 	bl	8000b0c <Error_Handler>
  }
}
 8000446:	bf00      	nop
 8000448:	3750      	adds	r7, #80	@ 0x50
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_ADC1_Init+0x44>)
 8000456:	4a10      	ldr	r2, [pc, #64]	@ (8000498 <MX_ADC1_Init+0x48>)
 8000458:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_ADC1_Init+0x44>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_ADC1_Init+0x44>)
 8000462:	2201      	movs	r2, #1
 8000464:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_ADC1_Init+0x44>)
 8000468:	2200      	movs	r2, #0
 800046a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_ADC1_Init+0x44>)
 800046e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000472:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <MX_ADC1_Init+0x44>)
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_ADC1_Init+0x44>)
 800047c:	2201      	movs	r2, #1
 800047e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	@ (8000494 <MX_ADC1_Init+0x44>)
 8000482:	f000 fe1d 	bl	80010c0 <HAL_ADC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 800048c:	f000 fb3e 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000078 	.word	0x20000078
 8000498:	40012400 	.word	0x40012400

0800049c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08e      	sub	sp, #56	@ 0x38
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	f107 0320 	add.w	r3, r7, #32
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
 80004c8:	615a      	str	r2, [r3, #20]
 80004ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80004d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004d6:	2247      	movs	r2, #71	@ 0x47
 80004d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004da:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80004e0:	4b27      	ldr	r3, [pc, #156]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004e2:	2263      	movs	r2, #99	@ 0x63
 80004e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e6:	4b26      	ldr	r3, [pc, #152]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ec:	4b24      	ldr	r3, [pc, #144]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004f2:	4823      	ldr	r0, [pc, #140]	@ (8000580 <MX_TIM2_Init+0xe4>)
 80004f4:	f002 fb88 	bl	8002c08 <HAL_TIM_Base_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80004fe:	f000 fb05 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000508:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800050c:	4619      	mov	r1, r3
 800050e:	481c      	ldr	r0, [pc, #112]	@ (8000580 <MX_TIM2_Init+0xe4>)
 8000510:	f002 fdea 	bl	80030e8 <HAL_TIM_ConfigClockSource>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800051a:	f000 faf7 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800051e:	4818      	ldr	r0, [pc, #96]	@ (8000580 <MX_TIM2_Init+0xe4>)
 8000520:	f002 fbc1 	bl	8002ca6 <HAL_TIM_PWM_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800052a:	f000 faef 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	4619      	mov	r1, r3
 800053c:	4810      	ldr	r0, [pc, #64]	@ (8000580 <MX_TIM2_Init+0xe4>)
 800053e:	f003 f94b 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000548:	f000 fae0 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054c:	2360      	movs	r3, #96	@ 0x60
 800054e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	4807      	ldr	r0, [pc, #28]	@ (8000580 <MX_TIM2_Init+0xe4>)
 8000564:	f002 fcfe 	bl	8002f64 <HAL_TIM_PWM_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800056e:	f000 facd 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <MX_TIM2_Init+0xe4>)
 8000574:	f000 fb8e 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 8000578:	bf00      	nop
 800057a:	3738      	adds	r7, #56	@ 0x38
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000ec 	.word	0x200000ec

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <MX_USART2_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005bc:	f003 f96a 	bl	8003894 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005c6:	f000 faa1 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000134 	.word	0x20000134
 80005d4:	40004400 	.word	0x40004400

080005d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <MX_USART3_UART_Init+0x50>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_USART3_UART_Init+0x4c>)
 8000610:	f003 f940 	bl	8003894 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800061a:	f000 fa77 	bl	8000b0c <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */


  /* USER CODE END USART3_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000017c 	.word	0x2000017c
 8000628:	40004800 	.word	0x40004800

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_DMA_Init+0x48>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <MX_DMA_Init+0x48>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_DMA_Init+0x48>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200b      	movs	r0, #11
 8000650:	f001 f99f 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000654:	200b      	movs	r0, #11
 8000656:	f001 f9b8 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2011      	movs	r0, #17
 8000660:	f001 f997 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000664:	2011      	movs	r0, #17
 8000666:	f001 f9b0 	bl	80019ca <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
  // USART3 TX (PB10)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	482c      	ldr	r0, [pc, #176]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006a2:	f001 fc4f 	bl	8001f44 <HAL_GPIO_Init>

  // USART3 RX (PB11)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4826      	ldr	r0, [pc, #152]	@ (8000754 <MX_GPIO_Init+0xdc>)
 80006bc:	f001 fc42 	bl	8001f44 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a24      	ldr	r2, [pc, #144]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0310 	and.w	r3, r3, #16
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006de:	f043 0320 	orr.w	r3, r3, #32
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_GPIO_Init+0xe0>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_GPIO_Init+0xe0>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_GPIO_Init+0xe0>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000726:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_GPIO_Init+0xe4>)
 8000728:	f001 fd90 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800072c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_GPIO_Init+0xe4>)
 8000746:	f001 fbfd 	bl	8001f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010c00 	.word	0x40010c00
 8000758:	40021000 	.word	0x40021000
 800075c:	40011000 	.word	0x40011000

08000760 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	@ 0x58
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	657b      	str	r3, [r7, #84]	@ 0x54
	  if (hadc->Instance == ADC1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <HAL_ADC_ConvCpltCallback+0x68>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d124      	bne.n	80007d4 <HAL_ADC_ConvCpltCallback+0x60>
		  char msg[64];
		  for (int i = 0; i < 64; i++) {
 800078a:	2300      	movs	r3, #0
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
 800078e:	e00d      	b.n	80007ac <HAL_ADC_ConvCpltCallback+0x38>
		      sum += adc_buf[(ADC_BUF_LEN - 1) - i];
 8000790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000792:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000796:	330f      	adds	r3, #15
 8000798:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800079a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079e:	461a      	mov	r2, r3
 80007a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007a2:	4413      	add	r3, r2
 80007a4:	657b      	str	r3, [r7, #84]	@ 0x54
		  for (int i = 0; i < 64; i++) {
 80007a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007a8:	3301      	adds	r3, #1
 80007aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80007ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80007b0:	ddee      	ble.n	8000790 <HAL_ADC_ConvCpltCallback+0x1c>
		  }
		  uint16_t avg = sum / 64;
 80007b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007b4:	099b      	lsrs	r3, r3, #6
 80007b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		  snprintf(msg, sizeof(msg), "ADC_avg = %u\r\n", avg);
 80007ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80007be:	f107 000c 	add.w	r0, r7, #12
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_ADC_ConvCpltCallback+0x70>)
 80007c4:	2140      	movs	r1, #64	@ 0x40
 80007c6:	f004 f867 	bl	8004898 <sniprintf>
		  uart_send_dma(msg);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fcce 	bl	8000170 <uart_send_dma>
	  }
}
 80007d4:	bf00      	nop
 80007d6:	3758      	adds	r7, #88	@ 0x58
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40012400 	.word	0x40012400
 80007e0:	20000208 	.word	0x20000208
 80007e4:	08005be0 	.word	0x08005be0

080007e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b0a9      	sub	sp, #164	@ 0xa4
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a8c      	ldr	r2, [pc, #560]	@ (8000a28 <HAL_UART_RxCpltCallback+0x240>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	f040 8111 	bne.w	8000a1e <HAL_UART_RxCpltCallback+0x236>
	    {
	        if (rx_byte == '\n' || rx_byte == '\r')
 80007fc:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <HAL_UART_RxCpltCallback+0x244>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b0a      	cmp	r3, #10
 8000802:	d004      	beq.n	800080e <HAL_UART_RxCpltCallback+0x26>
 8000804:	4b89      	ldr	r3, [pc, #548]	@ (8000a2c <HAL_UART_RxCpltCallback+0x244>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b0d      	cmp	r3, #13
 800080a:	f040 80f1 	bne.w	80009f0 <HAL_UART_RxCpltCallback+0x208>
	        {
	            rx_buffer[rx_index] = '\0';
 800080e:	4b88      	ldr	r3, [pc, #544]	@ (8000a30 <HAL_UART_RxCpltCallback+0x248>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b87      	ldr	r3, [pc, #540]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 8000816:	2100      	movs	r1, #0
 8000818:	5499      	strb	r1, [r3, r2]

	            if (strcmp(rx_buffer, "LED_ON") == 0)
 800081a:	4987      	ldr	r1, [pc, #540]	@ (8000a38 <HAL_UART_RxCpltCallback+0x250>)
 800081c:	4885      	ldr	r0, [pc, #532]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 800081e:	f7ff fc95 	bl	800014c <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d119      	bne.n	800085c <HAL_UART_RxCpltCallback+0x74>
	            {
	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082e:	4883      	ldr	r0, [pc, #524]	@ (8000a3c <HAL_UART_RxCpltCallback+0x254>)
 8000830:	f001 fd0c 	bl	800224c <HAL_GPIO_WritePin>
	                char msg[] = "LED is ON\r\n";
 8000834:	4a82      	ldr	r2, [pc, #520]	@ (8000a40 <HAL_UART_RxCpltCallback+0x258>)
 8000836:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800083a:	ca07      	ldmia	r2, {r0, r1, r2}
 800083c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	                HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8000840:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fc8b 	bl	8000160 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000852:	2364      	movs	r3, #100	@ 0x64
 8000854:	487b      	ldr	r0, [pc, #492]	@ (8000a44 <HAL_UART_RxCpltCallback+0x25c>)
 8000856:	f003 f86d 	bl	8003934 <HAL_UART_Transmit>
 800085a:	e0c0      	b.n	80009de <HAL_UART_RxCpltCallback+0x1f6>
	            }
	            else if (strcmp(rx_buffer, "LED_OFF") == 0)
 800085c:	497a      	ldr	r1, [pc, #488]	@ (8000a48 <HAL_UART_RxCpltCallback+0x260>)
 800085e:	4875      	ldr	r0, [pc, #468]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 8000860:	f7ff fc74 	bl	800014c <strcmp>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d119      	bne.n	800089e <HAL_UART_RxCpltCallback+0xb6>
	            {
	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000870:	4872      	ldr	r0, [pc, #456]	@ (8000a3c <HAL_UART_RxCpltCallback+0x254>)
 8000872:	f001 fceb 	bl	800224c <HAL_GPIO_WritePin>
	                char msg[] = "LED is OFF\r\n";
 8000876:	4b75      	ldr	r3, [pc, #468]	@ (8000a4c <HAL_UART_RxCpltCallback+0x264>)
 8000878:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 800087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087e:	c407      	stmia	r4!, {r0, r1, r2}
 8000880:	7023      	strb	r3, [r4, #0]
	                HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8000882:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fc6a 	bl	8000160 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	486b      	ldr	r0, [pc, #428]	@ (8000a44 <HAL_UART_RxCpltCallback+0x25c>)
 8000898:	f003 f84c 	bl	8003934 <HAL_UART_Transmit>
 800089c:	e09f      	b.n	80009de <HAL_UART_RxCpltCallback+0x1f6>
	            }
	            else if (strncmp(rx_buffer, "LED_PWM", 7) == 0)
 800089e:	2207      	movs	r2, #7
 80008a0:	496b      	ldr	r1, [pc, #428]	@ (8000a50 <HAL_UART_RxCpltCallback+0x268>)
 80008a2:	4864      	ldr	r0, [pc, #400]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 80008a4:	f004 f86f 	bl	8004986 <strncmp>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f040 8084 	bne.w	80009b8 <HAL_UART_RxCpltCallback+0x1d0>
	            {
	                int b_tmp;
	                uint32_t duration = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	67bb      	str	r3, [r7, #120]	@ 0x78
	                uint8_t brightness = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	                if (sscanf(rx_buffer, "LED_PWM %d %lu", &b_tmp, &duration) == 2)
 80008ba:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008be:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80008c2:	4964      	ldr	r1, [pc, #400]	@ (8000a54 <HAL_UART_RxCpltCallback+0x26c>)
 80008c4:	485b      	ldr	r0, [pc, #364]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 80008c6:	f004 f81b 	bl	8004900 <siscanf>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d15f      	bne.n	8000990 <HAL_UART_RxCpltCallback+0x1a8>
	                {
	                    brightness = (uint8_t)b_tmp;
 80008d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	                    char msg[64];
	                    char percent_str[5];
	                    char duration_str[12];

	                    itoa(brightness, percent_str, 10);
 80008d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80008da:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80008de:	220a      	movs	r2, #10
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 ff95 	bl	8004810 <itoa>
	                    itoa(duration, duration_str, 10);
 80008e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80008e8:	4618      	mov	r0, r3
 80008ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008ee:	220a      	movs	r2, #10
 80008f0:	4619      	mov	r1, r3
 80008f2:	f003 ff8d 	bl	8004810 <itoa>

	                    strcpy(msg, "PWM ");
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4a57      	ldr	r2, [pc, #348]	@ (8000a58 <HAL_UART_RxCpltCallback+0x270>)
 80008fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000900:	6018      	str	r0, [r3, #0]
 8000902:	3304      	adds	r3, #4
 8000904:	7019      	strb	r1, [r3, #0]
	                    strcat(msg, percent_str);
 8000906:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f004 f829 	bl	8004968 <strcat>
	                    strcat(msg, "% for ");
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc20 	bl	8000160 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4413      	add	r3, r2
 800092a:	4a4c      	ldr	r2, [pc, #304]	@ (8000a5c <HAL_UART_RxCpltCallback+0x274>)
 800092c:	6810      	ldr	r0, [r2, #0]
 800092e:	6018      	str	r0, [r3, #0]
 8000930:	8891      	ldrh	r1, [r2, #4]
 8000932:	7992      	ldrb	r2, [r2, #6]
 8000934:	8099      	strh	r1, [r3, #4]
 8000936:	719a      	strb	r2, [r3, #6]
	                    strcat(msg, duration_str);
 8000938:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f004 f810 	bl	8004968 <strcat>
	                    strcat(msg, " ms\r\n");
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc07 	bl	8000160 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4413      	add	r3, r2
 800095c:	4a40      	ldr	r2, [pc, #256]	@ (8000a60 <HAL_UART_RxCpltCallback+0x278>)
 800095e:	6810      	ldr	r0, [r2, #0]
 8000960:	6018      	str	r0, [r3, #0]
 8000962:	8892      	ldrh	r2, [r2, #4]
 8000964:	809a      	strh	r2, [r3, #4]

	                    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fbf8 	bl	8000160 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	4832      	ldr	r0, [pc, #200]	@ (8000a44 <HAL_UART_RxCpltCallback+0x25c>)
 800097c:	f002 ffda 	bl	8003934 <HAL_UART_Transmit>
	                    StartLedPWM(brightness, duration);
 8000980:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000982:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc61 	bl	8000250 <StartLedPWM>
 800098e:	e026      	b.n	80009de <HAL_UART_RxCpltCallback+0x1f6>
	                }
	                else
	                {
	                    char msg[] = "BAD FORMAT\r\n";
 8000990:	4b34      	ldr	r3, [pc, #208]	@ (8000a64 <HAL_UART_RxCpltCallback+0x27c>)
 8000992:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000998:	c407      	stmia	r4!, {r0, r1, r2}
 800099a:	7023      	strb	r3, [r4, #0]
	                    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 800099c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fbdd 	bl	8000160 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80009ae:	2364      	movs	r3, #100	@ 0x64
 80009b0:	4824      	ldr	r0, [pc, #144]	@ (8000a44 <HAL_UART_RxCpltCallback+0x25c>)
 80009b2:	f002 ffbf 	bl	8003934 <HAL_UART_Transmit>
 80009b6:	e012      	b.n	80009de <HAL_UART_RxCpltCallback+0x1f6>
	                }
	            }
	            else
	            {
	                char msg[] = "UNKNOWN\r\n";
 80009b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <HAL_UART_RxCpltCallback+0x280>)
 80009ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009be:	ca07      	ldmia	r2, {r0, r1, r2}
 80009c0:	c303      	stmia	r3!, {r0, r1}
 80009c2:	801a      	strh	r2, [r3, #0]
	                HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 80009c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fbc9 	bl	8000160 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80009d6:	2364      	movs	r3, #100	@ 0x64
 80009d8:	481a      	ldr	r0, [pc, #104]	@ (8000a44 <HAL_UART_RxCpltCallback+0x25c>)
 80009da:	f002 ffab 	bl	8003934 <HAL_UART_Transmit>
	            }

	            rx_index = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_UART_RxCpltCallback+0x248>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	            memset(rx_buffer, 0, sizeof(rx_buffer));
 80009e4:	2240      	movs	r2, #64	@ 0x40
 80009e6:	2100      	movs	r1, #0
 80009e8:	4812      	ldr	r0, [pc, #72]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 80009ea:	f003 ffb5 	bl	8004958 <memset>
 80009ee:	e011      	b.n	8000a14 <HAL_UART_RxCpltCallback+0x22c>
	        }
	        else
	        {
	            rx_buffer[rx_index++] = rx_byte;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_UART_RxCpltCallback+0x248>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	b2d1      	uxtb	r1, r2
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <HAL_UART_RxCpltCallback+0x248>)
 80009fa:	7011      	strb	r1, [r2, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_UART_RxCpltCallback+0x244>)
 8000a00:	7819      	ldrb	r1, [r3, #0]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_UART_RxCpltCallback+0x24c>)
 8000a04:	5499      	strb	r1, [r3, r2]
	            if (rx_index >= sizeof(rx_buffer))
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_UART_RxCpltCallback+0x248>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a0c:	d902      	bls.n	8000a14 <HAL_UART_RxCpltCallback+0x22c>
	                rx_index = 0;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_UART_RxCpltCallback+0x248>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	        }

	        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	4905      	ldr	r1, [pc, #20]	@ (8000a2c <HAL_UART_RxCpltCallback+0x244>)
 8000a18:	480a      	ldr	r0, [pc, #40]	@ (8000a44 <HAL_UART_RxCpltCallback+0x25c>)
 8000a1a:	f003 f816 	bl	8003a4a <HAL_UART_Receive_IT>
	    }
}
 8000a1e:	bf00      	nop
 8000a20:	37a4      	adds	r7, #164	@ 0xa4
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	200026cf 	.word	0x200026cf
 8000a30:	200026d0 	.word	0x200026d0
 8000a34:	20002288 	.word	0x20002288
 8000a38:	08005bf0 	.word	0x08005bf0
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	08005c30 	.word	0x08005c30
 8000a44:	2000017c 	.word	0x2000017c
 8000a48:	08005bf8 	.word	0x08005bf8
 8000a4c:	08005c3c 	.word	0x08005c3c
 8000a50:	08005c00 	.word	0x08005c00
 8000a54:	08005c08 	.word	0x08005c08
 8000a58:	08005c18 	.word	0x08005c18
 8000a5c:	08005c20 	.word	0x08005c20
 8000a60:	08005c28 	.word	0x08005c28
 8000a64:	08005c4c 	.word	0x08005c4c
 8000a68:	08005c5c 	.word	0x08005c5c

08000a6c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <HAL_UART_TxCpltCallback+0x80>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d132      	bne.n	8000ae2 <HAL_UART_TxCpltCallback+0x76>
    if (uart_q_count > 0) {
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_UART_TxCpltCallback+0x84>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d02b      	beq.n	8000adc <HAL_UART_TxCpltCallback+0x70>
      strncpy(tx_buf, uart_queue[uart_q_head], UART_LINE_LEN);
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <HAL_UART_TxCpltCallback+0x88>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	01db      	lsls	r3, r3, #7
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <HAL_UART_TxCpltCallback+0x8c>)
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	4619      	mov	r1, r3
 8000a92:	481a      	ldr	r0, [pc, #104]	@ (8000afc <HAL_UART_TxCpltCallback+0x90>)
 8000a94:	f003 ff89 	bl	80049aa <strncpy>
      tx_len = strlen(tx_buf);
 8000a98:	4818      	ldr	r0, [pc, #96]	@ (8000afc <HAL_UART_TxCpltCallback+0x90>)
 8000a9a:	f7ff fb61 	bl	8000160 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_UART_TxCpltCallback+0x94>)
 8000aa4:	801a      	strh	r2, [r3, #0]
      uart_q_head = (uart_q_head + 1) % UART_QUEUE_LEN;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <HAL_UART_TxCpltCallback+0x88>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	425a      	negs	r2, r3
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	f002 0207 	and.w	r2, r2, #7
 8000ab6:	bf58      	it	pl
 8000ab8:	4253      	negpl	r3, r2
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_UART_TxCpltCallback+0x88>)
 8000abe:	701a      	strb	r2, [r3, #0]
      uart_q_count--;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <HAL_UART_TxCpltCallback+0x84>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_UART_TxCpltCallback+0x84>)
 8000aca:	701a      	strb	r2, [r3, #0]

      HAL_UART_Transmit_DMA(&huart3, (uint8_t*)tx_buf, tx_len);
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_UART_TxCpltCallback+0x94>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	490a      	ldr	r1, [pc, #40]	@ (8000afc <HAL_UART_TxCpltCallback+0x90>)
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <HAL_UART_TxCpltCallback+0x98>)
 8000ad6:	f002 ffdd 	bl	8003a94 <HAL_UART_Transmit_DMA>
    } else {
      uart_busy = 0;
    }
  }
}
 8000ada:	e002      	b.n	8000ae2 <HAL_UART_TxCpltCallback+0x76>
      uart_busy = 0;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_UART_TxCpltCallback+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000134 	.word	0x20000134
 8000af0:	200026ce 	.word	0x200026ce
 8000af4:	200026cc 	.word	0x200026cc
 8000af8:	200022cc 	.word	0x200022cc
 8000afc:	20002208 	.word	0x20002208
 8000b00:	200022c8 	.word	0x200022c8
 8000b04:	2000017c 	.word	0x2000017c
 8000b08:	200022ca 	.word	0x200022ca

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_MspInit+0x5c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <HAL_MspInit+0x5c>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_MspInit+0x5c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x5c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_MspInit+0x5c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_MspInit+0x5c>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <HAL_MspInit+0x60>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <HAL_MspInit+0x60>)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010000 	.word	0x40010000

08000b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a2c      	ldr	r2, [pc, #176]	@ (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d151      	bne.n	8000c40 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000bdc:	f001 f9b2 	bl	8001f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000be2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c58 <HAL_ADC_MspInit+0xdc>)
 8000be4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c14:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000c16:	f000 fef3 	bl	8001a00 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c20:	f7ff ff74 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000c28:	621a      	str	r2, [r3, #32]
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2012      	movs	r0, #18
 8000c36:	f000 feac 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c3a:	2012      	movs	r0, #18
 8000c3c:	f000 fec5 	bl	80019ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40012400 	.word	0x40012400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	200000a8 	.word	0x200000a8
 8000c58:	40020008 	.word	0x40020008

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c6c:	d10b      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb2:	d12a      	bne.n	8000d0a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_TIM_MspPostInit+0x80>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a16      	ldr	r2, [pc, #88]	@ (8000d14 <HAL_TIM_MspPostInit+0x80>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_TIM_MspPostInit+0x80>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ccc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <HAL_TIM_MspPostInit+0x84>)
 8000ce2:	f001 f92f 	bl	8001f44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_TIM_MspPostInit+0x88>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <HAL_TIM_MspPostInit+0x88>)
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010000 	.word	0x40010000

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8000e74 <HAL_UART_MspInit+0x154>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d156      	bne.n	8000dee <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b4d      	ldr	r3, [pc, #308]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a4c      	ldr	r2, [pc, #304]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4a:	61d3      	str	r3, [r2, #28]
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a46      	ldr	r2, [pc, #280]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b44      	ldr	r3, [pc, #272]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d70:	2304      	movs	r3, #4
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4619      	mov	r1, r3
 8000d82:	483e      	ldr	r0, [pc, #248]	@ (8000e7c <HAL_UART_MspInit+0x15c>)
 8000d84:	f001 f8de 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4838      	ldr	r0, [pc, #224]	@ (8000e7c <HAL_UART_MspInit+0x15c>)
 8000d9c:	f001 f8d2 	bl	8001f44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000da0:	4b37      	ldr	r3, [pc, #220]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000da2:	4a38      	ldr	r2, [pc, #224]	@ (8000e84 <HAL_UART_MspInit+0x164>)
 8000da4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000da8:	2210      	movs	r2, #16
 8000daa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db8:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dbe:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dca:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dd0:	482b      	ldr	r0, [pc, #172]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000dd2:	f000 fe15 	bl	8001a00 <HAL_DMA_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000ddc:	f7ff fe96 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a27      	ldr	r2, [pc, #156]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000de4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000de6:	4a26      	ldr	r2, [pc, #152]	@ (8000e80 <HAL_UART_MspInit+0x160>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dec:	e03e      	b.n	8000e6c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <HAL_UART_MspInit+0x168>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d139      	bne.n	8000e6c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e02:	61d3      	str	r3, [r2, #28]
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a18      	ldr	r2, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_UART_MspInit+0x158>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <HAL_UART_MspInit+0x16c>)
 8000e3e:	f001 f881 	bl	8001f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <HAL_UART_MspInit+0x16c>)
 8000e58:	f001 f874 	bl	8001f44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2027      	movs	r0, #39	@ 0x27
 8000e62:	f000 fd96 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e66:	2027      	movs	r0, #39	@ 0x27
 8000e68:	f000 fdaf 	bl	80019ca <HAL_NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	200001c4 	.word	0x200001c4
 8000e84:	40020080 	.word	0x40020080
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8d2 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <DMA1_Channel1_IRQHandler+0x10>)
 8000eee:	f000 fef5 	bl	8001cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000a8 	.word	0x200000a8

08000efc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <DMA1_Channel7_IRQHandler+0x10>)
 8000f02:	f000 feeb 	bl	8001cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001c4 	.word	0x200001c4

08000f10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <ADC1_2_IRQHandler+0x10>)
 8000f16:	f000 fa89 	bl	800142c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000078 	.word	0x20000078

08000f24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <USART3_IRQHandler+0x10>)
 8000f2a:	f002 fe23 	bl	8003b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000017c 	.word	0x2000017c

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f003 fd32 	bl	80049d0 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20005000 	.word	0x20005000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200026d8 	.word	0x200026d8
 8000fa0:	20002828 	.word	0x20002828

08000fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb0:	f7ff fff8 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fb6:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fcc:	4c09      	ldr	r4, [pc, #36]	@ (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 fcff 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff f9ad 	bl	800033c <main>
  bx lr
 8000fe2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fec:	08005e24 	.word	0x08005e24
  ldr r2, =_sbss
 8000ff0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ff4:	20002828 	.word	0x20002828

08000ff8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <CAN1_RX1_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 fcb5 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fd7e 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fccd 	bl	80019e6 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 fc95 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	@ (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000008 	.word	0x20000008
 80010a8:	200026dc 	.word	0x200026dc

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	@ (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	200026dc 	.word	0x200026dc

080010c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0be      	b.n	8001260 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fd3c 	bl	8000b7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fabd 	bl	8001684 <ADC_ConversionStop_Disable>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8099 	bne.w	800124e <HAL_ADC_Init+0x18e>
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 8095 	bne.w	800124e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800112c:	f023 0302 	bic.w	r3, r3, #2
 8001130:	f043 0202 	orr.w	r2, r3, #2
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001140:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001148:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	4313      	orrs	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001158:	d003      	beq.n	8001162 <HAL_ADC_Init+0xa2>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_ADC_Init+0xa8>
 8001162:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001166:	e000      	b.n	800116a <HAL_ADC_Init+0xaa>
 8001168:	2300      	movs	r3, #0
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7d1b      	ldrb	r3, [r3, #20]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d119      	bne.n	80011ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	3b01      	subs	r3, #1
 8001186:	035a      	lsls	r2, r3, #13
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e00b      	b.n	80011ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	f043 0220 	orr.w	r2, r3, #32
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_ADC_Init+0x1a8>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011dc:	d003      	beq.n	80011e6 <HAL_ADC_Init+0x126>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	051b      	lsls	r3, r3, #20
 80011ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	430a      	orrs	r2, r1
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_ADC_Init+0x1ac>)
 800120c:	4013      	ands	r3, r2
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	429a      	cmp	r2, r3
 8001212:	d10b      	bne.n	800122c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800122a:	e018      	b.n	800125e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	f023 0312 	bic.w	r3, r3, #18
 8001234:	f043 0210 	orr.w	r2, r3, #16
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	f043 0201 	orr.w	r2, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800124c:	e007      	b.n	800125e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	f043 0210 	orr.w	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	ffe1f7fd 	.word	0xffe1f7fd
 800126c:	ff1f0efe 	.word	0xff1f0efe

08001270 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a64      	ldr	r2, [pc, #400]	@ (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_ADC_Start_DMA+0x24>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_ADC_Start_DMA+0x1ac>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d106      	bne.n	80012a2 <HAL_ADC_Start_DMA+0x32>
 8001294:	4b60      	ldr	r3, [pc, #384]	@ (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 80b3 	bne.w	8001408 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_ADC_Start_DMA+0x40>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e0ae      	b.n	800140e <HAL_ADC_Start_DMA+0x19e>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f989 	bl	80015d0 <ADC_Enable>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 809a 	bne.w	80013fe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a4e      	ldr	r2, [pc, #312]	@ (800141c <HAL_ADC_Start_DMA+0x1ac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_Start_DMA+0x84>
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130a:	2b00      	cmp	r3, #0
 800130c:	d026      	beq.n	800135c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001316:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800131e:	e01d      	b.n	800135c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d004      	beq.n	8001340 <HAL_ADC_Start_DMA+0xd0>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a38      	ldr	r2, [pc, #224]	@ (800141c <HAL_ADC_Start_DMA+0x1ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10d      	bne.n	800135c <HAL_ADC_Start_DMA+0xec>
 8001340:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001354:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	f023 0206 	bic.w	r2, r3, #6
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001374:	e002      	b.n	800137c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <HAL_ADC_Start_DMA+0x1b0>)
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <HAL_ADC_Start_DMA+0x1b4>)
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <HAL_ADC_Start_DMA+0x1b8>)
 800139a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f06f 0202 	mvn.w	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013b4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a18      	ldr	r0, [r3, #32]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	334c      	adds	r3, #76	@ 0x4c
 80013c0:	4619      	mov	r1, r3
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f000 fb75 	bl	8001ab4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013d4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013d8:	d108      	bne.n	80013ec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013e8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013ea:	e00f      	b.n	800140c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013fa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013fc:	e006      	b.n	800140c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001406:	e001      	b.n	800140c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40012400 	.word	0x40012400
 800141c:	40012800 	.word	0x40012800
 8001420:	08001707 	.word	0x08001707
 8001424:	08001783 	.word	0x08001783
 8001428:	0800179f 	.word	0x0800179f

0800142c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03e      	beq.n	80014cc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d039      	beq.n	80014cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800147a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800147e:	d11d      	bne.n	80014bc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001484:	2b00      	cmp	r3, #0
 8001486:	d119      	bne.n	80014bc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0220 	bic.w	r2, r2, #32
 8001496:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff f959 	bl	8000774 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f06f 0212 	mvn.w	r2, #18
 80014ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d04d      	beq.n	8001572 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d048      	beq.n	8001572 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001502:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001506:	d012      	beq.n	800152e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001512:	2b00      	cmp	r3, #0
 8001514:	d125      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001520:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001524:	d11d      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800153c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001542:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f935 	bl	80017d2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 020c 	mvn.w	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f809 	bl	80015aa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0201 	mvn.w	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d040      	beq.n	8001670 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <ADC_Enable+0xac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1f      	ldr	r2, [pc, #124]	@ (8001680 <ADC_Enable+0xb0>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160c:	e002      	b.n	8001614 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3b01      	subs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800161a:	f7ff fd47 	bl	80010ac <HAL_GetTick>
 800161e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001620:	e01f      	b.n	8001662 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001622:	f7ff fd43 	bl	80010ac <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d918      	bls.n	8001662 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d011      	beq.n	8001662 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e007      	b.n	8001672 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b01      	cmp	r3, #1
 800166e:	d1d8      	bne.n	8001622 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83

08001684 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d12e      	bne.n	80016fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ae:	f7ff fcfd 	bl	80010ac <HAL_GetTick>
 80016b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016b4:	e01b      	b.n	80016ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016b6:	f7ff fcf9 	bl	80010ac <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d914      	bls.n	80016ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10d      	bne.n	80016ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e007      	b.n	80016fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d0dc      	beq.n	80016b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800171c:	2b00      	cmp	r3, #0
 800171e:	d127      	bne.n	8001770 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001724:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001736:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800173a:	d115      	bne.n	8001768 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff f803 	bl	8000774 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800176e:	e004      	b.n	800177a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7fe ffe5 	bl	8000760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	f043 0204 	orr.w	r2, r3, #4
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fef9 	bl	80015bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4906      	ldr	r1, [pc, #24]	@ (800187c <__NVIC_EnableIRQ+0x34>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	@ (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	@ 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff90 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff2d 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff42 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff90 	bl	80018d4 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5f 	bl	8001880 <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff35 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e043      	b.n	8001a9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <HAL_DMA_Init+0xa8>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <HAL_DMA_Init+0xac>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	009a      	lsls	r2, r3, #2
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab0 <HAL_DMA_Init+0xb0>)
 8001a32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	cccccccd 	.word	0xcccccccd
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Start_IT+0x20>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e04b      	b.n	8001b6c <HAL_DMA_Start_IT+0xb8>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d13a      	bne.n	8001b5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f9eb 	bl	8001ee8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 020e 	orr.w	r2, r2, #14
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00f      	b.n	8001b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 020a 	orr.w	r2, r2, #10
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e005      	b.n	8001b6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020e 	bic.w	r2, r2, #14
 8001bac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d005      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2204      	movs	r2, #4
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e051      	b.n	8001cb4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 020e 	bic.w	r2, r2, #14
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a22      	ldr	r2, [pc, #136]	@ (8001cc0 <HAL_DMA_Abort_IT+0xd4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d029      	beq.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <HAL_DMA_Abort_IT+0xd8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_Abort_IT+0x9e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <HAL_DMA_Abort_IT+0xdc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01a      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x98>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	@ (8001ccc <HAL_DMA_Abort_IT+0xe0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d012      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x92>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <HAL_DMA_Abort_IT+0xe4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00a      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x8c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <HAL_DMA_Abort_IT+0xe8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d102      	bne.n	8001c72 <HAL_DMA_Abort_IT+0x86>
 8001c6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c70:	e00e      	b.n	8001c90 <HAL_DMA_Abort_IT+0xa4>
 8001c72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c76:	e00b      	b.n	8001c90 <HAL_DMA_Abort_IT+0xa4>
 8001c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c7c:	e008      	b.n	8001c90 <HAL_DMA_Abort_IT+0xa4>
 8001c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c82:	e005      	b.n	8001c90 <HAL_DMA_Abort_IT+0xa4>
 8001c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c88:	e002      	b.n	8001c90 <HAL_DMA_Abort_IT+0xa4>
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Abort_IT+0xa4>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <HAL_DMA_Abort_IT+0xec>)
 8001c92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
    } 
  }
  return status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40020008 	.word	0x40020008
 8001cc4:	4002001c 	.word	0x4002001c
 8001cc8:	40020030 	.word	0x40020030
 8001ccc:	40020044 	.word	0x40020044
 8001cd0:	40020058 	.word	0x40020058
 8001cd4:	4002006c 	.word	0x4002006c
 8001cd8:	40020000 	.word	0x40020000

08001cdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d04f      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xc8>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d04a      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a66      	ldr	r2, [pc, #408]	@ (8001ecc <HAL_DMA_IRQHandler+0x1f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d029      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xae>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a65      	ldr	r2, [pc, #404]	@ (8001ed0 <HAL_DMA_IRQHandler+0x1f4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xaa>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a63      	ldr	r2, [pc, #396]	@ (8001ed4 <HAL_DMA_IRQHandler+0x1f8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01a      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xa4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a62      	ldr	r2, [pc, #392]	@ (8001ed8 <HAL_DMA_IRQHandler+0x1fc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x9e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <HAL_DMA_IRQHandler+0x200>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00a      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x98>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5f      	ldr	r2, [pc, #380]	@ (8001ee0 <HAL_DMA_IRQHandler+0x204>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <HAL_DMA_IRQHandler+0x92>
 8001d68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d6c:	e00e      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d72:	e00b      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d78:	e008      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d7e:	e005      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d84:	e002      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d86:	2340      	movs	r3, #64	@ 0x40
 8001d88:	e000      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	4a55      	ldr	r2, [pc, #340]	@ (8001ee4 <HAL_DMA_IRQHandler+0x208>)
 8001d8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8094 	beq.w	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	e08e      	b.n	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	2202      	movs	r2, #2
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d056      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x186>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d051      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020a 	bic.w	r2, r2, #10
 8001dda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a38      	ldr	r2, [pc, #224]	@ (8001ecc <HAL_DMA_IRQHandler+0x1f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d029      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x166>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a37      	ldr	r2, [pc, #220]	@ (8001ed0 <HAL_DMA_IRQHandler+0x1f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x162>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a35      	ldr	r2, [pc, #212]	@ (8001ed4 <HAL_DMA_IRQHandler+0x1f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x15c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a34      	ldr	r2, [pc, #208]	@ (8001ed8 <HAL_DMA_IRQHandler+0x1fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x156>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a32      	ldr	r2, [pc, #200]	@ (8001edc <HAL_DMA_IRQHandler+0x200>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00a      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x150>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a31      	ldr	r2, [pc, #196]	@ (8001ee0 <HAL_DMA_IRQHandler+0x204>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <HAL_DMA_IRQHandler+0x14a>
 8001e20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e24:	e00e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2a:	e00b      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e30:	e008      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e36:	e005      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e3c:	e002      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e000      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e42:	2302      	movs	r3, #2
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <HAL_DMA_IRQHandler+0x208>)
 8001e46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d034      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e60:	e02f      	b.n	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2208      	movs	r2, #8
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d028      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x1e8>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d023      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 020e 	bic.w	r2, r2, #14
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
    }
  }
  return;
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
}
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40020008 	.word	0x40020008
 8001ed0:	4002001c 	.word	0x4002001c
 8001ed4:	40020030 	.word	0x40020030
 8001ed8:	40020044 	.word	0x40020044
 8001edc:	40020058 	.word	0x40020058
 8001ee0:	4002006c 	.word	0x4002006c
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d108      	bne.n	8001f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f26:	e007      	b.n	8001f38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	@ 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e169      	b.n	800222c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8158 	bne.w	8002226 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a9a      	ldr	r2, [pc, #616]	@ (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d05e      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f80:	4a98      	ldr	r2, [pc, #608]	@ (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d875      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f86:	4a98      	ldr	r2, [pc, #608]	@ (80021e8 <HAL_GPIO_Init+0x2a4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d058      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f8c:	4a96      	ldr	r2, [pc, #600]	@ (80021e8 <HAL_GPIO_Init+0x2a4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d86f      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f92:	4a96      	ldr	r2, [pc, #600]	@ (80021ec <HAL_GPIO_Init+0x2a8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d052      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f98:	4a94      	ldr	r2, [pc, #592]	@ (80021ec <HAL_GPIO_Init+0x2a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d869      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f9e:	4a94      	ldr	r2, [pc, #592]	@ (80021f0 <HAL_GPIO_Init+0x2ac>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04c      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fa4:	4a92      	ldr	r2, [pc, #584]	@ (80021f0 <HAL_GPIO_Init+0x2ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d863      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001faa:	4a92      	ldr	r2, [pc, #584]	@ (80021f4 <HAL_GPIO_Init+0x2b0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d046      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a90      	ldr	r2, [pc, #576]	@ (80021f4 <HAL_GPIO_Init+0x2b0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d85d      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d82a      	bhi.n	8002010 <HAL_GPIO_Init+0xcc>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d859      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc4 <HAL_GPIO_Init+0x80>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	0800206d 	.word	0x0800206d
 8001fd4:	08002073 	.word	0x08002073
 8001fd8:	08002073 	.word	0x08002073
 8001fdc:	08002073 	.word	0x08002073
 8001fe0:	08002073 	.word	0x08002073
 8001fe4:	08002073 	.word	0x08002073
 8001fe8:	08002073 	.word	0x08002073
 8001fec:	08002073 	.word	0x08002073
 8001ff0:	08002073 	.word	0x08002073
 8001ff4:	08002073 	.word	0x08002073
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	08002073 	.word	0x08002073
 8002000:	08002073 	.word	0x08002073
 8002004:	08002073 	.word	0x08002073
 8002008:	08002021 	.word	0x08002021
 800200c:	08002035 	.word	0x08002035
 8002010:	4a79      	ldr	r2, [pc, #484]	@ (80021f8 <HAL_GPIO_Init+0x2b4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002016:	e02c      	b.n	8002072 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e029      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e024      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3308      	adds	r3, #8
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e01f      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	330c      	adds	r3, #12
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e01a      	b.n	8002074 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002046:	2304      	movs	r3, #4
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e013      	b.n	8002074 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	611a      	str	r2, [r3, #16]
          break;
 800205e:	e009      	b.n	8002074 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	615a      	str	r2, [r3, #20]
          break;
 800206a:	e003      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x130>
          break;
 8002072:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	@ 0xff
 8002078:	d801      	bhi.n	800207e <HAL_GPIO_Init+0x13a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_Init+0x13e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	@ 0xff
 8002088:	d802      	bhi.n	8002090 <HAL_GPIO_Init+0x14c>
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x152>
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	3b08      	subs	r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	210f      	movs	r1, #15
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80b1 	beq.w	8002226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c4:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <HAL_GPIO_Init+0x2b8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	@ (80021fc <HAL_GPIO_Init+0x2b8>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020dc:	4a48      	ldr	r2, [pc, #288]	@ (8002200 <HAL_GPIO_Init+0x2bc>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a40      	ldr	r2, [pc, #256]	@ (8002204 <HAL_GPIO_Init+0x2c0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_GPIO_Init+0x1ec>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3f      	ldr	r2, [pc, #252]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00d      	beq.n	800212c <HAL_GPIO_Init+0x1e8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3e      	ldr	r2, [pc, #248]	@ (800220c <HAL_GPIO_Init+0x2c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x1e4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3d      	ldr	r2, [pc, #244]	@ (8002210 <HAL_GPIO_Init+0x2cc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_GPIO_Init+0x1e0>
 8002120:	2303      	movs	r3, #3
 8002122:	e006      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002124:	2304      	movs	r3, #4
 8002126:	e004      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002128:	2302      	movs	r3, #2
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002130:	2300      	movs	r3, #0
 8002132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002142:	492f      	ldr	r1, [pc, #188]	@ (8002200 <HAL_GPIO_Init+0x2bc>)
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800215c:	4b2d      	ldr	r3, [pc, #180]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	492c      	ldr	r1, [pc, #176]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800216a:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4928      	ldr	r1, [pc, #160]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002184:	4b23      	ldr	r3, [pc, #140]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	4922      	ldr	r1, [pc, #136]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	60cb      	str	r3, [r1, #12]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	491e      	ldr	r1, [pc, #120]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	4918      	ldr	r1, [pc, #96]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	4914      	ldr	r1, [pc, #80]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d021      	beq.n	8002218 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e021      	b.n	8002226 <HAL_GPIO_Init+0x2e2>
 80021e2:	bf00      	nop
 80021e4:	10320000 	.word	0x10320000
 80021e8:	10310000 	.word	0x10310000
 80021ec:	10220000 	.word	0x10220000
 80021f0:	10210000 	.word	0x10210000
 80021f4:	10120000 	.word	0x10120000
 80021f8:	10110000 	.word	0x10110000
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	40010800 	.word	0x40010800
 8002208:	40010c00 	.word	0x40010c00
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_GPIO_Init+0x304>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	43db      	mvns	r3, r3
 8002220:	4909      	ldr	r1, [pc, #36]	@ (8002248 <HAL_GPIO_Init+0x304>)
 8002222:	4013      	ands	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f47f ae8e 	bne.w	8001f58 <HAL_GPIO_Init+0x14>
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	372c      	adds	r7, #44	@ 0x2c
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e272      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8087 	beq.w	80023aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800229c:	4b92      	ldr	r3, [pc, #584]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a8:	4b8f      	ldr	r3, [pc, #572]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d112      	bne.n	80022da <HAL_RCC_OscConfig+0x5e>
 80022b4:	4b8c      	ldr	r3, [pc, #560]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d10b      	bne.n	80022da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c2:	4b89      	ldr	r3, [pc, #548]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d06c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x12c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d168      	bne.n	80023a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e24c      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x76>
 80022e4:	4b80      	ldr	r3, [pc, #512]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7f      	ldr	r2, [pc, #508]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	e02e      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x98>
 80022fa:	4b7b      	ldr	r3, [pc, #492]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7a      	ldr	r2, [pc, #488]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b78      	ldr	r3, [pc, #480]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a77      	ldr	r2, [pc, #476]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01d      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0xbc>
 800231e:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a71      	ldr	r2, [pc, #452]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b6f      	ldr	r3, [pc, #444]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6e      	ldr	r2, [pc, #440]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 8002338:	4b6b      	ldr	r3, [pc, #428]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6a      	ldr	r2, [pc, #424]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a67      	ldr	r2, [pc, #412]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fea8 	bl	80010ac <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe fea4 	bl	80010ac <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e200      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b5d      	ldr	r3, [pc, #372]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0xe4>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fe94 	bl	80010ac <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7fe fe90 	bl	80010ac <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	@ 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1ec      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x10c>
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b6:	4b4c      	ldr	r3, [pc, #304]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c2:	4b49      	ldr	r3, [pc, #292]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_OscConfig+0x18c>
 80023ce:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	4b43      	ldr	r3, [pc, #268]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e1c0      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b3d      	ldr	r3, [pc, #244]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4939      	ldr	r1, [pc, #228]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	e03a      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002410:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fe49 	bl	80010ac <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe fe45 	bl	80010ac <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1a1      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4927      	ldr	r1, [pc, #156]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fe28 	bl	80010ac <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe fe24 	bl	80010ac <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e180      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03a      	beq.n	8002500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe fe08 	bl	80010ac <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fe04 	bl	80010ac <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e160      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024be:	2001      	movs	r0, #1
 80024c0:	f000 face 	bl	8002a60 <RCC_Delay>
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fdee 	bl	80010ac <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fdea 	bl	80010ac <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d908      	bls.n	80024f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e146      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	42420000 	.word	0x42420000
 80024f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b92      	ldr	r3, [pc, #584]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e9      	bne.n	80024d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a6 	beq.w	800265a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b8b      	ldr	r3, [pc, #556]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b88      	ldr	r3, [pc, #544]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a87      	ldr	r2, [pc, #540]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	61d3      	str	r3, [r2, #28]
 800252a:	4b85      	ldr	r3, [pc, #532]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b82      	ldr	r3, [pc, #520]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b7f      	ldr	r3, [pc, #508]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7e      	ldr	r2, [pc, #504]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fdab 	bl	80010ac <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fda7 	bl	80010ac <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	@ 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e103      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b75      	ldr	r3, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x312>
 8002580:	4b6f      	ldr	r3, [pc, #444]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a6e      	ldr	r2, [pc, #440]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	e02d      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x334>
 8002596:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a69      	ldr	r2, [pc, #420]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a66      	ldr	r2, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x356>
 80025b8:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 80025d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	4b58      	ldr	r3, [pc, #352]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a57      	ldr	r2, [pc, #348]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fd5b 	bl	80010ac <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fd57 	bl	80010ac <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0b1      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x37e>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fd45 	bl	80010ac <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fd41 	bl	80010ac <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e09b      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b3c      	ldr	r3, [pc, #240]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a3b      	ldr	r2, [pc, #236]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d061      	beq.n	8002734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d146      	bne.n	8002706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fd15 	bl	80010ac <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe fd11 	bl	80010ac <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e06d      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ac:	d108      	bne.n	80026c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4921      	ldr	r1, [pc, #132]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a19      	ldr	r1, [r3, #32]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	430b      	orrs	r3, r1
 80026d2:	491b      	ldr	r1, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fce5 	bl	80010ac <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fce1 	bl	80010ac <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e03d      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x46a>
 8002704:	e035      	b.n	8002772 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fcce 	bl	80010ac <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fcca 	bl	80010ac <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e026      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x498>
 8002732:	e01e      	b.n	8002772 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e019      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_OscConfig+0x500>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0d0      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b6a      	ldr	r3, [pc, #424]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4965      	ldr	r1, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d040      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e073      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4936      	ldr	r1, [pc, #216]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fc1c 	bl	80010ac <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fc18 	bl	80010ac <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e053      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d210      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0207 	bic.w	r2, r3, #7
 80028b6:	4922      	ldr	r1, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1cc>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fb7a 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
 8002948:	08005c74 	.word	0x08005c74
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x30>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x36>
 8002982:	e027      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	e027      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a17      	ldr	r2, [pc, #92]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0c5b      	lsrs	r3, r3, #17
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	4a11      	ldr	r2, [pc, #68]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x98>)
 80029b6:	fb03 f202 	mul.w	r2, r3, r2
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e004      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x98>)
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	693b      	ldr	r3, [r7, #16]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	007a1200 	.word	0x007a1200
 80029f0:	08005c8c 	.word	0x08005c8c
 80029f4:	08005c9c 	.word	0x08005c9c
 80029f8:	003d0900 	.word	0x003d0900

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b02      	ldr	r3, [pc, #8]	@ (8002a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff2 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08005c84 	.word	0x08005c84

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0adb      	lsrs	r3, r3, #11
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	@ (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08005c84 	.word	0x08005c84

08002a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a68:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <RCC_Delay+0x34>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <RCC_Delay+0x38>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0a5b      	lsrs	r3, r3, #9
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a7c:	bf00      	nop
  }
  while (Delay --);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	60fa      	str	r2, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f9      	bne.n	8002a7c <RCC_Delay+0x1c>
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000000 	.word	0x20000000
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d07d      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abc:	4b4f      	ldr	r3, [pc, #316]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	61d3      	str	r3, [r2, #28]
 8002ad4:	4b49      	ldr	r3, [pc, #292]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d118      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af0:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a42      	ldr	r2, [pc, #264]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fad6 	bl	80010ac <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	e008      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fad2 	bl	80010ac <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e06d      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b3a      	ldr	r3, [pc, #232]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b22:	4b36      	ldr	r3, [pc, #216]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d02e      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d027      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b40:	4b2e      	ldr	r3, [pc, #184]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b50:	4b2c      	ldr	r3, [pc, #176]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b56:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe faa1 	bl	80010ac <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fa9d 	bl	80010ac <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e036      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b90:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4917      	ldr	r1, [pc, #92]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	490b      	ldr	r1, [pc, #44]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bde:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42420440 	.word	0x42420440

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e041      	b.n	8002c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe f814 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 fb16 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e041      	b.n	8002d3c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f839 	bl	8002d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f000 fac7 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_TIM_PWM_Start+0x24>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e022      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x6a>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d109      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x3e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e015      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x6a>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d109      	bne.n	8002db0 <HAL_TIM_PWM_Start+0x58>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e008      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x6a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e05e      	b.n	8002e88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0x82>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd8:	e013      	b.n	8002e02 <HAL_TIM_PWM_Start+0xaa>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0x92>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de8:	e00b      	b.n	8002e02 <HAL_TIM_PWM_Start+0xaa>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0xa2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df8:	e003      	b.n	8002e02 <HAL_TIM_PWM_Start+0xaa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fcc0 	bl	8003790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1e      	ldr	r2, [pc, #120]	@ (8002e90 <HAL_TIM_PWM_Start+0x138>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d107      	bne.n	8002e2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a18      	ldr	r2, [pc, #96]	@ (8002e90 <HAL_TIM_PWM_Start+0x138>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_TIM_PWM_Start+0xfa>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3c:	d009      	beq.n	8002e52 <HAL_TIM_PWM_Start+0xfa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <HAL_TIM_PWM_Start+0x13c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_TIM_PWM_Start+0xfa>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <HAL_TIM_PWM_Start+0x140>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d111      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d010      	beq.n	8002e86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	e007      	b.n	8002e86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800

08002e9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fc6e 	bl	8003790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <HAL_TIM_PWM_Stop+0xc4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d117      	bne.n	8002eee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_TIM_PWM_Stop+0x52>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_TIM_PWM_Stop+0x52>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <HAL_TIM_PWM_Stop+0x82>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_PWM_Stop+0x82>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Stop+0x92>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2c:	e013      	b.n	8002f56 <HAL_TIM_PWM_Stop+0xba>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_PWM_Stop+0xa2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f3c:	e00b      	b.n	8002f56 <HAL_TIM_PWM_Stop+0xba>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_PWM_Stop+0xb2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4c:	e003      	b.n	8002f56 <HAL_TIM_PWM_Stop+0xba>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0ae      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	f200 809f 	bhi.w	80030d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f92:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fcd 	.word	0x08002fcd
 8002f9c:	080030d1 	.word	0x080030d1
 8002fa0:	080030d1 	.word	0x080030d1
 8002fa4:	080030d1 	.word	0x080030d1
 8002fa8:	0800300d 	.word	0x0800300d
 8002fac:	080030d1 	.word	0x080030d1
 8002fb0:	080030d1 	.word	0x080030d1
 8002fb4:	080030d1 	.word	0x080030d1
 8002fb8:	0800304f 	.word	0x0800304f
 8002fbc:	080030d1 	.word	0x080030d1
 8002fc0:	080030d1 	.word	0x080030d1
 8002fc4:	080030d1 	.word	0x080030d1
 8002fc8:	0800308f 	.word	0x0800308f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f9be 	bl	8003354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0208 	orr.w	r2, r2, #8
 8002fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6999      	ldr	r1, [r3, #24]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	619a      	str	r2, [r3, #24]
      break;
 800300a:	e064      	b.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fa04 	bl	8003420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6999      	ldr	r1, [r3, #24]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	619a      	str	r2, [r3, #24]
      break;
 800304c:	e043      	b.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fa4d 	bl	80034f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0208 	orr.w	r2, r2, #8
 8003068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0204 	bic.w	r2, r2, #4
 8003078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69d9      	ldr	r1, [r3, #28]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	61da      	str	r2, [r3, #28]
      break;
 800308c:	e023      	b.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fa97 	bl	80035c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69d9      	ldr	r1, [r3, #28]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	021a      	lsls	r2, r3, #8
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	61da      	str	r2, [r3, #28]
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	75fb      	strb	r3, [r7, #23]
      break;
 80030d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_ConfigClockSource+0x1c>
 8003100:	2302      	movs	r3, #2
 8003102:	e0b4      	b.n	800326e <HAL_TIM_ConfigClockSource+0x186>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800312a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313c:	d03e      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0xd4>
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003142:	f200 8087 	bhi.w	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314a:	f000 8086 	beq.w	800325a <HAL_TIM_ConfigClockSource+0x172>
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003152:	d87f      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b70      	cmp	r3, #112	@ 0x70
 8003156:	d01a      	beq.n	800318e <HAL_TIM_ConfigClockSource+0xa6>
 8003158:	2b70      	cmp	r3, #112	@ 0x70
 800315a:	d87b      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b60      	cmp	r3, #96	@ 0x60
 800315e:	d050      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x11a>
 8003160:	2b60      	cmp	r3, #96	@ 0x60
 8003162:	d877      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b50      	cmp	r3, #80	@ 0x50
 8003166:	d03c      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003168:	2b50      	cmp	r3, #80	@ 0x50
 800316a:	d873      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d058      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x13a>
 8003170:	2b40      	cmp	r3, #64	@ 0x40
 8003172:	d86f      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b30      	cmp	r3, #48	@ 0x30
 8003176:	d064      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 8003178:	2b30      	cmp	r3, #48	@ 0x30
 800317a:	d86b      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d060      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	2b20      	cmp	r3, #32
 8003182:	d867      	bhi.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05c      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 8003188:	2b10      	cmp	r3, #16
 800318a:	d05a      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x15a>
 800318c:	e062      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800319e:	f000 fad8 	bl	8003752 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
      break;
 80031ba:	e04f      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031cc:	f000 fac1 	bl	8003752 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031de:	609a      	str	r2, [r3, #8]
      break;
 80031e0:	e03c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	461a      	mov	r2, r3
 80031f0:	f000 fa38 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2150      	movs	r1, #80	@ 0x50
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fa8f 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003200:	e02c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800320e:	461a      	mov	r2, r3
 8003210:	f000 fa56 	bl	80036c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2160      	movs	r1, #96	@ 0x60
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fa7f 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003220:	e01c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	461a      	mov	r2, r3
 8003230:	f000 fa18 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2140      	movs	r1, #64	@ 0x40
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fa6f 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003240:	e00c      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f000 fa66 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 8003252:	e003      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      break;
 8003258:	e000      	b.n	800325c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800325a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a2f      	ldr	r2, [pc, #188]	@ (8003348 <TIM_Base_SetConfig+0xd0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0x30>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0x30>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a2c      	ldr	r2, [pc, #176]	@ (800334c <TIM_Base_SetConfig+0xd4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0x30>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003350 <TIM_Base_SetConfig+0xd8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <TIM_Base_SetConfig+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <TIM_Base_SetConfig+0xd4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <TIM_Base_SetConfig+0xd8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0d      	ldr	r2, [pc, #52]	@ (8003348 <TIM_Base_SetConfig+0xd0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  }
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800

08003354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 0201 	bic.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 0302 	bic.w	r3, r3, #2
 800339c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <TIM_OC1_SetConfig+0xc8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10c      	bne.n	80033ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0308 	bic.w	r3, r3, #8
 80033b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a13      	ldr	r2, [pc, #76]	@ (800341c <TIM_OC1_SetConfig+0xc8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d111      	bne.n	80033f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40012c00 	.word	0x40012c00

08003420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 0210 	bic.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0320 	bic.w	r3, r3, #32
 800346a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <TIM_OC2_SetConfig+0xd0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d10d      	bne.n	800349c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800349a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a14      	ldr	r2, [pc, #80]	@ (80034f0 <TIM_OC2_SetConfig+0xd0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d113      	bne.n	80034cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00

080034f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <TIM_OC3_SetConfig+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10d      	bne.n	800356e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800356c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <TIM_OC3_SetConfig+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d113      	bne.n	800359e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800357c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00

080035c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0f      	ldr	r2, [pc, #60]	@ (8003660 <TIM_OC4_SetConfig+0x98>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d109      	bne.n	800363c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800362e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00

08003664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0210 	bic.w	r2, r3, #16
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	031b      	lsls	r3, r3, #12
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	f043 0307 	orr.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800376c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e046      	b.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d009      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a12      	ldr	r2, [pc, #72]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a10      	ldr	r2, [pc, #64]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10c      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800

08003894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e042      	b.n	800392c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fa30 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	@ 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fef3 	bl	80046c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800390c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b20      	cmp	r3, #32
 8003952:	d175      	bne.n	8003a40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_UART_Transmit+0x2c>
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e06e      	b.n	8003a42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2221      	movs	r2, #33	@ 0x21
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003972:	f7fd fb9b 	bl	80010ac <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398c:	d108      	bne.n	80039a0 <HAL_UART_Transmit+0x6c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e003      	b.n	80039a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a8:	e02e      	b.n	8003a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	@ 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fc31 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e03a      	b.n	8003a42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3302      	adds	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e007      	b.n	80039fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1cb      	bne.n	80039aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2140      	movs	r1, #64	@ 0x40
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fbfd 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e006      	b.n	8003a42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d112      	bne.n	8003a8a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Receive_IT+0x26>
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e00b      	b.n	8003a8c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fc24 	bl	80042ce <UART_Start_Receive_IT>
 8003a86:	4603      	mov	r3, r0
 8003a88:	e000      	b.n	8003a8c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d156      	bne.n	8003b5c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UART_Transmit_DMA+0x26>
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e04f      	b.n	8003b5e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2221      	movs	r2, #33	@ 0x21
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	4a21      	ldr	r2, [pc, #132]	@ (8003b68 <HAL_UART_Transmit_DMA+0xd4>)
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aea:	4a20      	ldr	r2, [pc, #128]	@ (8003b6c <HAL_UART_Transmit_DMA+0xd8>)
 8003aec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b70 <HAL_UART_Transmit_DMA+0xdc>)
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	2200      	movs	r2, #0
 8003afc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3304      	adds	r3, #4
 8003b12:	461a      	mov	r2, r3
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	f7fd ffcd 	bl	8001ab4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	617b      	str	r3, [r7, #20]
   return(result);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b44:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e5      	bne.n	8003b24 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3730      	adds	r7, #48	@ 0x30
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	080040d3 	.word	0x080040d3
 8003b6c:	0800416d 	.word	0x0800416d
 8003b70:	08004189 	.word	0x08004189

08003b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0ba      	sub	sp, #232	@ 0xe8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_UART_IRQHandler+0x66>
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fcb8 	bl	8004548 <UART_Receive_IT>
      return;
 8003bd8:	e25b      	b.n	8004092 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80de 	beq.w	8003da0 <HAL_UART_IRQHandler+0x22c>
 8003be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80d1 	beq.w	8003da0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_UART_IRQHandler+0xae>
 8003c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0xd2>
 8003c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f043 0202 	orr.w	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xf6>
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f043 0204 	orr.w	r2, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <HAL_UART_IRQHandler+0x126>
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f043 0208 	orr.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 81f2 	beq.w	8004088 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x14e>
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fc43 	bl	8004548 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_UART_IRQHandler+0x17a>
 8003ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04f      	beq.n	8003d8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fb4d 	bl	800438e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d041      	beq.n	8003d86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1d9      	bne.n	8003d02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d013      	beq.n	8003d7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f54 <HAL_UART_IRQHandler+0x3e0>)
 8003d5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd ff42 	bl	8001bec <HAL_DMA_Abort_IT>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e00e      	b.n	8003d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f993 	bl	80040aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	e00a      	b.n	8003d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f98f 	bl	80040aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	e006      	b.n	8003d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f98b 	bl	80040aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d9a:	e175      	b.n	8004088 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	bf00      	nop
    return;
 8003d9e:	e173      	b.n	8004088 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 814f 	bne.w	8004048 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8148 	beq.w	8004048 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8141 	beq.w	8004048 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80b6 	beq.w	8003f58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8145 	beq.w	800408c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f080 813e 	bcs.w	800408c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	f000 8088 	beq.w	8003f34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e50:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1d9      	bne.n	8003e24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3314      	adds	r3, #20
 8003e76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3314      	adds	r3, #20
 8003e90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e1      	bne.n	8003e70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ed0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ed6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e3      	bne.n	8003eac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f18:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e3      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fe20 	bl	8001b74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8b6 	bl	80040bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f50:	e09c      	b.n	800408c <HAL_UART_IRQHandler+0x518>
 8003f52:	bf00      	nop
 8003f54:	08004453 	.word	0x08004453
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 808e 	beq.w	8004090 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8089 	beq.w	8004090 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e3      	bne.n	8003f7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fda:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e3      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	60fb      	str	r3, [r7, #12]
   return(result);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0310 	bic.w	r3, r3, #16
 8004012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004020:	61fa      	str	r2, [r7, #28]
 8004022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	69b9      	ldr	r1, [r7, #24]
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	617b      	str	r3, [r7, #20]
   return(result);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e3      	bne.n	8003ffc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800403a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f83b 	bl	80040bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004046:	e023      	b.n	8004090 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_UART_IRQHandler+0x4f4>
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fa0a 	bl	800447a <UART_Transmit_IT>
    return;
 8004066:	e014      	b.n	8004092 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <HAL_UART_IRQHandler+0x51e>
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fa49 	bl	8004518 <UART_EndTransmit_IT>
    return;
 8004086:	e004      	b.n	8004092 <HAL_UART_IRQHandler+0x51e>
    return;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_UART_IRQHandler+0x51e>
      return;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_UART_IRQHandler+0x51e>
      return;
 8004090:	bf00      	nop
  }
}
 8004092:	37e8      	adds	r7, #232	@ 0xe8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b090      	sub	sp, #64	@ 0x40
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d137      	bne.n	800415e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f0:	2200      	movs	r2, #0
 80040f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	623b      	str	r3, [r7, #32]
   return(result);
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800410c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004114:	633a      	str	r2, [r7, #48]	@ 0x30
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800411a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e5      	bne.n	80040f4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	60fb      	str	r3, [r7, #12]
   return(result);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800413e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004148:	61fa      	str	r2, [r7, #28]
 800414a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	69b9      	ldr	r1, [r7, #24]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	617b      	str	r3, [r7, #20]
   return(result);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800415c:	e002      	b.n	8004164 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800415e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004160:	f7fc fc84 	bl	8000a6c <HAL_UART_TxCpltCallback>
}
 8004164:	bf00      	nop
 8004166:	3740      	adds	r7, #64	@ 0x40
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff ff8c 	bl	8004098 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b21      	cmp	r3, #33	@ 0x21
 80041ba:	d108      	bne.n	80041ce <UART_DMAError+0x46>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80041c8:	68b8      	ldr	r0, [r7, #8]
 80041ca:	f000 f8b9 	bl	8004340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b22      	cmp	r3, #34	@ 0x22
 80041ee:	d108      	bne.n	8004202 <UART_DMAError+0x7a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80041fc:	68b8      	ldr	r0, [r7, #8]
 80041fe:	f000 f8c6 	bl	800438e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f043 0210 	orr.w	r2, r3, #16
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f7ff ff4b 	bl	80040aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e03b      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d037      	beq.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fc ff39 	bl	80010ac <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e03a      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d023      	beq.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b80      	cmp	r3, #128	@ 0x80
 8004262:	d020      	beq.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b40      	cmp	r3, #64	@ 0x40
 8004268:	d01d      	beq.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d116      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f87d 	bl	800438e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2208      	movs	r2, #8
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00f      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4013      	ands	r3, r2
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d0b4      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2222      	movs	r2, #34	@ 0x22
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004312:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0220 	orr.w	r2, r2, #32
 8004332:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	@ 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	60bb      	str	r3, [r7, #8]
   return(result);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	61ba      	str	r2, [r7, #24]
 800436a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	613b      	str	r3, [r7, #16]
   return(result);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004384:	bf00      	nop
 8004386:	3724      	adds	r7, #36	@ 0x24
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438e:	b480      	push	{r7}
 8004390:	b095      	sub	sp, #84	@ 0x54
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80043b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	2b01      	cmp	r3, #1
 8004404:	d119      	bne.n	800443a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	60bb      	str	r3, [r7, #8]
   return(result);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f023 0310 	bic.w	r3, r3, #16
 800441c:	647b      	str	r3, [r7, #68]	@ 0x44
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004426:	61ba      	str	r2, [r7, #24]
 8004428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6979      	ldr	r1, [r7, #20]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	613b      	str	r3, [r7, #16]
   return(result);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004448:	bf00      	nop
 800444a:	3754      	adds	r7, #84	@ 0x54
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff fe1c 	bl	80040aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b21      	cmp	r3, #33	@ 0x21
 800448c:	d13e      	bne.n	800450c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004496:	d114      	bne.n	80044c2 <UART_Transmit_IT+0x48>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d110      	bne.n	80044c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	621a      	str	r2, [r3, #32]
 80044c0:	e008      	b.n	80044d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6211      	str	r1, [r2, #32]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4619      	mov	r1, r3
 80044e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10f      	bne.n	8004508 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004506:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800452e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7fc fa97 	bl	8000a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	@ 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	@ 0x22
 800455a:	f040 80ae 	bne.w	80046ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d117      	bne.n	8004598 <UART_Receive_IT+0x50>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	b29a      	uxth	r2, r3
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	629a      	str	r2, [r3, #40]	@ 0x28
 8004596:	e026      	b.n	80045e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045aa:	d007      	beq.n	80045bc <UART_Receive_IT+0x74>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <UART_Receive_IT+0x82>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e008      	b.n	80045dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d15d      	bne.n	80046b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0220 	bic.w	r2, r2, #32
 8004608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	2b01      	cmp	r3, #1
 800463e:	d135      	bne.n	80046ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004666:	623a      	str	r2, [r7, #32]
 8004668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	69f9      	ldr	r1, [r7, #28]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	61bb      	str	r3, [r7, #24]
   return(result);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d10a      	bne.n	800469e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fd09 	bl	80040bc <HAL_UARTEx_RxEventCallback>
 80046aa:	e002      	b.n	80046b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc f89b 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e002      	b.n	80046bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3730      	adds	r7, #48	@ 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80046fe:	f023 030c 	bic.w	r3, r3, #12
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	430b      	orrs	r3, r1
 800470a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2c      	ldr	r2, [pc, #176]	@ (80047d8 <UART_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d103      	bne.n	8004734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fe f984 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	e002      	b.n	800473a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004734:	f7fe f96c 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8004738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009a      	lsls	r2, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <UART_SetConfig+0x118>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	0119      	lsls	r1, r3, #4
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004770:	4b1a      	ldr	r3, [pc, #104]	@ (80047dc <UART_SetConfig+0x118>)
 8004772:	fba3 0302 	umull	r0, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	2064      	movs	r0, #100	@ 0x64
 800477a:	fb00 f303 	mul.w	r3, r0, r3
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	3332      	adds	r3, #50	@ 0x32
 8004784:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <UART_SetConfig+0x118>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004790:	4419      	add	r1, r3
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <UART_SetConfig+0x118>)
 80047aa:	fba3 0302 	umull	r0, r3, r3, r2
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2064      	movs	r0, #100	@ 0x64
 80047b2:	fb00 f303 	mul.w	r3, r0, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	3332      	adds	r3, #50	@ 0x32
 80047bc:	4a07      	ldr	r2, [pc, #28]	@ (80047dc <UART_SetConfig+0x118>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	440a      	add	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40013800 	.word	0x40013800
 80047dc:	51eb851f 	.word	0x51eb851f

080047e0 <__itoa>:
 80047e0:	1e93      	subs	r3, r2, #2
 80047e2:	2b22      	cmp	r3, #34	@ 0x22
 80047e4:	b510      	push	{r4, lr}
 80047e6:	460c      	mov	r4, r1
 80047e8:	d904      	bls.n	80047f4 <__itoa+0x14>
 80047ea:	2300      	movs	r3, #0
 80047ec:	461c      	mov	r4, r3
 80047ee:	700b      	strb	r3, [r1, #0]
 80047f0:	4620      	mov	r0, r4
 80047f2:	bd10      	pop	{r4, pc}
 80047f4:	2a0a      	cmp	r2, #10
 80047f6:	d109      	bne.n	800480c <__itoa+0x2c>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	da07      	bge.n	800480c <__itoa+0x2c>
 80047fc:	232d      	movs	r3, #45	@ 0x2d
 80047fe:	700b      	strb	r3, [r1, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	4240      	negs	r0, r0
 8004804:	4421      	add	r1, r4
 8004806:	f000 f805 	bl	8004814 <__utoa>
 800480a:	e7f1      	b.n	80047f0 <__itoa+0x10>
 800480c:	2100      	movs	r1, #0
 800480e:	e7f9      	b.n	8004804 <__itoa+0x24>

08004810 <itoa>:
 8004810:	f7ff bfe6 	b.w	80047e0 <__itoa>

08004814 <__utoa>:
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b08b      	sub	sp, #44	@ 0x2c
 8004818:	4605      	mov	r5, r0
 800481a:	460b      	mov	r3, r1
 800481c:	466e      	mov	r6, sp
 800481e:	4c1d      	ldr	r4, [pc, #116]	@ (8004894 <__utoa+0x80>)
 8004820:	f104 0c20 	add.w	ip, r4, #32
 8004824:	4637      	mov	r7, r6
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	6861      	ldr	r1, [r4, #4]
 800482a:	3408      	adds	r4, #8
 800482c:	c703      	stmia	r7!, {r0, r1}
 800482e:	4564      	cmp	r4, ip
 8004830:	463e      	mov	r6, r7
 8004832:	d1f7      	bne.n	8004824 <__utoa+0x10>
 8004834:	7921      	ldrb	r1, [r4, #4]
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	7139      	strb	r1, [r7, #4]
 800483a:	1e91      	subs	r1, r2, #2
 800483c:	2922      	cmp	r1, #34	@ 0x22
 800483e:	6038      	str	r0, [r7, #0]
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	d904      	bls.n	8004850 <__utoa+0x3c>
 8004846:	7019      	strb	r1, [r3, #0]
 8004848:	460b      	mov	r3, r1
 800484a:	4618      	mov	r0, r3
 800484c:	b00b      	add	sp, #44	@ 0x2c
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	1e58      	subs	r0, r3, #1
 8004852:	4684      	mov	ip, r0
 8004854:	fbb5 f7f2 	udiv	r7, r5, r2
 8004858:	fb02 5617 	mls	r6, r2, r7, r5
 800485c:	3628      	adds	r6, #40	@ 0x28
 800485e:	446e      	add	r6, sp
 8004860:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004864:	460c      	mov	r4, r1
 8004866:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800486a:	462e      	mov	r6, r5
 800486c:	42b2      	cmp	r2, r6
 800486e:	463d      	mov	r5, r7
 8004870:	f101 0101 	add.w	r1, r1, #1
 8004874:	d9ee      	bls.n	8004854 <__utoa+0x40>
 8004876:	2200      	movs	r2, #0
 8004878:	545a      	strb	r2, [r3, r1]
 800487a:	1919      	adds	r1, r3, r4
 800487c:	1aa5      	subs	r5, r4, r2
 800487e:	42aa      	cmp	r2, r5
 8004880:	dae3      	bge.n	800484a <__utoa+0x36>
 8004882:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004886:	780e      	ldrb	r6, [r1, #0]
 8004888:	3201      	adds	r2, #1
 800488a:	7006      	strb	r6, [r0, #0]
 800488c:	f801 5901 	strb.w	r5, [r1], #-1
 8004890:	e7f4      	b.n	800487c <__utoa+0x68>
 8004892:	bf00      	nop
 8004894:	08005c9e 	.word	0x08005c9e

08004898 <sniprintf>:
 8004898:	b40c      	push	{r2, r3}
 800489a:	b530      	push	{r4, r5, lr}
 800489c:	4b17      	ldr	r3, [pc, #92]	@ (80048fc <sniprintf+0x64>)
 800489e:	1e0c      	subs	r4, r1, #0
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	b09d      	sub	sp, #116	@ 0x74
 80048a4:	da08      	bge.n	80048b8 <sniprintf+0x20>
 80048a6:	238b      	movs	r3, #139	@ 0x8b
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	602b      	str	r3, [r5, #0]
 80048ae:	b01d      	add	sp, #116	@ 0x74
 80048b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b4:	b002      	add	sp, #8
 80048b6:	4770      	bx	lr
 80048b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80048bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80048c0:	bf0c      	ite	eq
 80048c2:	4623      	moveq	r3, r4
 80048c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	9307      	str	r3, [sp, #28]
 80048cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048d0:	9002      	str	r0, [sp, #8]
 80048d2:	9006      	str	r0, [sp, #24]
 80048d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048d8:	4628      	mov	r0, r5
 80048da:	ab21      	add	r3, sp, #132	@ 0x84
 80048dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80048de:	a902      	add	r1, sp, #8
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	f000 fa01 	bl	8004ce8 <_svfiprintf_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	bfbc      	itt	lt
 80048ea:	238b      	movlt	r3, #139	@ 0x8b
 80048ec:	602b      	strlt	r3, [r5, #0]
 80048ee:	2c00      	cmp	r4, #0
 80048f0:	d0dd      	beq.n	80048ae <sniprintf+0x16>
 80048f2:	2200      	movs	r2, #0
 80048f4:	9b02      	ldr	r3, [sp, #8]
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e7d9      	b.n	80048ae <sniprintf+0x16>
 80048fa:	bf00      	nop
 80048fc:	2000000c 	.word	0x2000000c

08004900 <siscanf>:
 8004900:	b40e      	push	{r1, r2, r3}
 8004902:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004906:	b530      	push	{r4, r5, lr}
 8004908:	b09c      	sub	sp, #112	@ 0x70
 800490a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800490c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004910:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004914:	9002      	str	r0, [sp, #8]
 8004916:	9006      	str	r0, [sp, #24]
 8004918:	f7fb fc22 	bl	8000160 <strlen>
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <siscanf+0x4c>)
 800491e:	9003      	str	r0, [sp, #12]
 8004920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004922:	2300      	movs	r3, #0
 8004924:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004926:	9314      	str	r3, [sp, #80]	@ 0x50
 8004928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800492c:	9007      	str	r0, [sp, #28]
 800492e:	4808      	ldr	r0, [pc, #32]	@ (8004950 <siscanf+0x50>)
 8004930:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004934:	462a      	mov	r2, r5
 8004936:	4623      	mov	r3, r4
 8004938:	a902      	add	r1, sp, #8
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	9401      	str	r4, [sp, #4]
 800493e:	f000 fb27 	bl	8004f90 <__ssvfiscanf_r>
 8004942:	b01c      	add	sp, #112	@ 0x70
 8004944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004948:	b003      	add	sp, #12
 800494a:	4770      	bx	lr
 800494c:	08004955 	.word	0x08004955
 8004950:	2000000c 	.word	0x2000000c

08004954 <__seofread>:
 8004954:	2000      	movs	r0, #0
 8004956:	4770      	bx	lr

08004958 <memset>:
 8004958:	4603      	mov	r3, r0
 800495a:	4402      	add	r2, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <strcat>:
 8004968:	4602      	mov	r2, r0
 800496a:	b510      	push	{r4, lr}
 800496c:	7814      	ldrb	r4, [r2, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	3201      	adds	r2, #1
 8004972:	2c00      	cmp	r4, #0
 8004974:	d1fa      	bne.n	800496c <strcat+0x4>
 8004976:	3b01      	subs	r3, #1
 8004978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800497c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004980:	2a00      	cmp	r2, #0
 8004982:	d1f9      	bne.n	8004978 <strcat+0x10>
 8004984:	bd10      	pop	{r4, pc}

08004986 <strncmp>:
 8004986:	b510      	push	{r4, lr}
 8004988:	b16a      	cbz	r2, 80049a6 <strncmp+0x20>
 800498a:	3901      	subs	r1, #1
 800498c:	1884      	adds	r4, r0, r2
 800498e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004992:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004996:	429a      	cmp	r2, r3
 8004998:	d103      	bne.n	80049a2 <strncmp+0x1c>
 800499a:	42a0      	cmp	r0, r4
 800499c:	d001      	beq.n	80049a2 <strncmp+0x1c>
 800499e:	2a00      	cmp	r2, #0
 80049a0:	d1f5      	bne.n	800498e <strncmp+0x8>
 80049a2:	1ad0      	subs	r0, r2, r3
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	4610      	mov	r0, r2
 80049a8:	e7fc      	b.n	80049a4 <strncmp+0x1e>

080049aa <strncpy>:
 80049aa:	4603      	mov	r3, r0
 80049ac:	b510      	push	{r4, lr}
 80049ae:	3901      	subs	r1, #1
 80049b0:	b132      	cbz	r2, 80049c0 <strncpy+0x16>
 80049b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049b6:	3a01      	subs	r2, #1
 80049b8:	f803 4b01 	strb.w	r4, [r3], #1
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d1f7      	bne.n	80049b0 <strncpy+0x6>
 80049c0:	2100      	movs	r1, #0
 80049c2:	441a      	add	r2, r3
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d100      	bne.n	80049ca <strncpy+0x20>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	f803 1b01 	strb.w	r1, [r3], #1
 80049ce:	e7f9      	b.n	80049c4 <strncpy+0x1a>

080049d0 <__errno>:
 80049d0:	4b01      	ldr	r3, [pc, #4]	@ (80049d8 <__errno+0x8>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	2000000c 	.word	0x2000000c

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	2600      	movs	r6, #0
 80049e0:	4d0c      	ldr	r5, [pc, #48]	@ (8004a14 <__libc_init_array+0x38>)
 80049e2:	4c0d      	ldr	r4, [pc, #52]	@ (8004a18 <__libc_init_array+0x3c>)
 80049e4:	1b64      	subs	r4, r4, r5
 80049e6:	10a4      	asrs	r4, r4, #2
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	f001 f8ec 	bl	8005bc8 <_init>
 80049f0:	2600      	movs	r6, #0
 80049f2:	4d0a      	ldr	r5, [pc, #40]	@ (8004a1c <__libc_init_array+0x40>)
 80049f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004a20 <__libc_init_array+0x44>)
 80049f6:	1b64      	subs	r4, r4, r5
 80049f8:	10a4      	asrs	r4, r4, #2
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08005e1c 	.word	0x08005e1c
 8004a18:	08005e1c 	.word	0x08005e1c
 8004a1c:	08005e1c 	.word	0x08005e1c
 8004a20:	08005e20 	.word	0x08005e20

08004a24 <__retarget_lock_acquire_recursive>:
 8004a24:	4770      	bx	lr

08004a26 <__retarget_lock_release_recursive>:
 8004a26:	4770      	bx	lr

08004a28 <memcpy>:
 8004a28:	440a      	add	r2, r1
 8004a2a:	4291      	cmp	r1, r2
 8004a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a30:	d100      	bne.n	8004a34 <memcpy+0xc>
 8004a32:	4770      	bx	lr
 8004a34:	b510      	push	{r4, lr}
 8004a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a40:	d1f9      	bne.n	8004a36 <memcpy+0xe>
 8004a42:	bd10      	pop	{r4, pc}

08004a44 <_free_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4605      	mov	r5, r0
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d040      	beq.n	8004ace <_free_r+0x8a>
 8004a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a50:	1f0c      	subs	r4, r1, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bfb8      	it	lt
 8004a56:	18e4      	addlt	r4, r4, r3
 8004a58:	f000 f8de 	bl	8004c18 <__malloc_lock>
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <_free_r+0x8c>)
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	b933      	cbnz	r3, 8004a70 <_free_r+0x2c>
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	4628      	mov	r0, r5
 8004a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6c:	f000 b8da 	b.w	8004c24 <__malloc_unlock>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d908      	bls.n	8004a86 <_free_r+0x42>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	1821      	adds	r1, r4, r0
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	e7ed      	b.n	8004a62 <_free_r+0x1e>
 8004a86:	461a      	mov	r2, r3
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b10b      	cbz	r3, 8004a90 <_free_r+0x4c>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d9fa      	bls.n	8004a86 <_free_r+0x42>
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	1850      	adds	r0, r2, r1
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d10b      	bne.n	8004ab0 <_free_r+0x6c>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	1850      	adds	r0, r2, r1
 8004a9e:	4283      	cmp	r3, r0
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	d1e0      	bne.n	8004a66 <_free_r+0x22>
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4408      	add	r0, r1
 8004aaa:	6010      	str	r0, [r2, #0]
 8004aac:	6053      	str	r3, [r2, #4]
 8004aae:	e7da      	b.n	8004a66 <_free_r+0x22>
 8004ab0:	d902      	bls.n	8004ab8 <_free_r+0x74>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	e7d6      	b.n	8004a66 <_free_r+0x22>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	1821      	adds	r1, r4, r0
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf01      	itttt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	1809      	addeq	r1, r1, r0
 8004ac6:	6021      	streq	r1, [r4, #0]
 8004ac8:	6063      	str	r3, [r4, #4]
 8004aca:	6054      	str	r4, [r2, #4]
 8004acc:	e7cb      	b.n	8004a66 <_free_r+0x22>
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20002824 	.word	0x20002824

08004ad4 <sbrk_aligned>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8004b14 <sbrk_aligned+0x40>)
 8004ad8:	460c      	mov	r4, r1
 8004ada:	6831      	ldr	r1, [r6, #0]
 8004adc:	4605      	mov	r5, r0
 8004ade:	b911      	cbnz	r1, 8004ae6 <sbrk_aligned+0x12>
 8004ae0:	f000 ff32 	bl	8005948 <_sbrk_r>
 8004ae4:	6030      	str	r0, [r6, #0]
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 ff2d 	bl	8005948 <_sbrk_r>
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	d103      	bne.n	8004afa <sbrk_aligned+0x26>
 8004af2:	f04f 34ff 	mov.w	r4, #4294967295
 8004af6:	4620      	mov	r0, r4
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	1cc4      	adds	r4, r0, #3
 8004afc:	f024 0403 	bic.w	r4, r4, #3
 8004b00:	42a0      	cmp	r0, r4
 8004b02:	d0f8      	beq.n	8004af6 <sbrk_aligned+0x22>
 8004b04:	1a21      	subs	r1, r4, r0
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 ff1e 	bl	8005948 <_sbrk_r>
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d1f2      	bne.n	8004af6 <sbrk_aligned+0x22>
 8004b10:	e7ef      	b.n	8004af2 <sbrk_aligned+0x1e>
 8004b12:	bf00      	nop
 8004b14:	20002820 	.word	0x20002820

08004b18 <_malloc_r>:
 8004b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b1c:	1ccd      	adds	r5, r1, #3
 8004b1e:	f025 0503 	bic.w	r5, r5, #3
 8004b22:	3508      	adds	r5, #8
 8004b24:	2d0c      	cmp	r5, #12
 8004b26:	bf38      	it	cc
 8004b28:	250c      	movcc	r5, #12
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	db01      	blt.n	8004b34 <_malloc_r+0x1c>
 8004b30:	42a9      	cmp	r1, r5
 8004b32:	d904      	bls.n	8004b3e <_malloc_r+0x26>
 8004b34:	230c      	movs	r3, #12
 8004b36:	6033      	str	r3, [r6, #0]
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c14 <_malloc_r+0xfc>
 8004b42:	f000 f869 	bl	8004c18 <__malloc_lock>
 8004b46:	f8d8 3000 	ldr.w	r3, [r8]
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	bb44      	cbnz	r4, 8004ba0 <_malloc_r+0x88>
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7ff ffbf 	bl	8004ad4 <sbrk_aligned>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	4604      	mov	r4, r0
 8004b5a:	d158      	bne.n	8004c0e <_malloc_r+0xf6>
 8004b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b60:	4627      	mov	r7, r4
 8004b62:	2f00      	cmp	r7, #0
 8004b64:	d143      	bne.n	8004bee <_malloc_r+0xd6>
 8004b66:	2c00      	cmp	r4, #0
 8004b68:	d04b      	beq.n	8004c02 <_malloc_r+0xea>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4630      	mov	r0, r6
 8004b70:	eb04 0903 	add.w	r9, r4, r3
 8004b74:	f000 fee8 	bl	8005948 <_sbrk_r>
 8004b78:	4581      	cmp	r9, r0
 8004b7a:	d142      	bne.n	8004c02 <_malloc_r+0xea>
 8004b7c:	6821      	ldr	r1, [r4, #0]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	1a6d      	subs	r5, r5, r1
 8004b82:	4629      	mov	r1, r5
 8004b84:	f7ff ffa6 	bl	8004ad4 <sbrk_aligned>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d03a      	beq.n	8004c02 <_malloc_r+0xea>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	442b      	add	r3, r5
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	f8d8 3000 	ldr.w	r3, [r8]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	bb62      	cbnz	r2, 8004bf4 <_malloc_r+0xdc>
 8004b9a:	f8c8 7000 	str.w	r7, [r8]
 8004b9e:	e00f      	b.n	8004bc0 <_malloc_r+0xa8>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	1b52      	subs	r2, r2, r5
 8004ba4:	d420      	bmi.n	8004be8 <_malloc_r+0xd0>
 8004ba6:	2a0b      	cmp	r2, #11
 8004ba8:	d917      	bls.n	8004bda <_malloc_r+0xc2>
 8004baa:	1961      	adds	r1, r4, r5
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	6025      	str	r5, [r4, #0]
 8004bb0:	bf18      	it	ne
 8004bb2:	6059      	strne	r1, [r3, #4]
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	bf08      	it	eq
 8004bb8:	f8c8 1000 	streq.w	r1, [r8]
 8004bbc:	5162      	str	r2, [r4, r5]
 8004bbe:	604b      	str	r3, [r1, #4]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 f82f 	bl	8004c24 <__malloc_unlock>
 8004bc6:	f104 000b 	add.w	r0, r4, #11
 8004bca:	1d23      	adds	r3, r4, #4
 8004bcc:	f020 0007 	bic.w	r0, r0, #7
 8004bd0:	1ac2      	subs	r2, r0, r3
 8004bd2:	bf1c      	itt	ne
 8004bd4:	1a1b      	subne	r3, r3, r0
 8004bd6:	50a3      	strne	r3, [r4, r2]
 8004bd8:	e7af      	b.n	8004b3a <_malloc_r+0x22>
 8004bda:	6862      	ldr	r2, [r4, #4]
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	bf0c      	ite	eq
 8004be0:	f8c8 2000 	streq.w	r2, [r8]
 8004be4:	605a      	strne	r2, [r3, #4]
 8004be6:	e7eb      	b.n	8004bc0 <_malloc_r+0xa8>
 8004be8:	4623      	mov	r3, r4
 8004bea:	6864      	ldr	r4, [r4, #4]
 8004bec:	e7ae      	b.n	8004b4c <_malloc_r+0x34>
 8004bee:	463c      	mov	r4, r7
 8004bf0:	687f      	ldr	r7, [r7, #4]
 8004bf2:	e7b6      	b.n	8004b62 <_malloc_r+0x4a>
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d1fb      	bne.n	8004bf4 <_malloc_r+0xdc>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6053      	str	r3, [r2, #4]
 8004c00:	e7de      	b.n	8004bc0 <_malloc_r+0xa8>
 8004c02:	230c      	movs	r3, #12
 8004c04:	4630      	mov	r0, r6
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	f000 f80c 	bl	8004c24 <__malloc_unlock>
 8004c0c:	e794      	b.n	8004b38 <_malloc_r+0x20>
 8004c0e:	6005      	str	r5, [r0, #0]
 8004c10:	e7d6      	b.n	8004bc0 <_malloc_r+0xa8>
 8004c12:	bf00      	nop
 8004c14:	20002824 	.word	0x20002824

08004c18 <__malloc_lock>:
 8004c18:	4801      	ldr	r0, [pc, #4]	@ (8004c20 <__malloc_lock+0x8>)
 8004c1a:	f7ff bf03 	b.w	8004a24 <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	2000281c 	.word	0x2000281c

08004c24 <__malloc_unlock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	@ (8004c2c <__malloc_unlock+0x8>)
 8004c26:	f7ff befe 	b.w	8004a26 <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	2000281c 	.word	0x2000281c

08004c30 <__ssputs_r>:
 8004c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	461f      	mov	r7, r3
 8004c36:	688e      	ldr	r6, [r1, #8]
 8004c38:	4682      	mov	sl, r0
 8004c3a:	42be      	cmp	r6, r7
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	4690      	mov	r8, r2
 8004c40:	680b      	ldr	r3, [r1, #0]
 8004c42:	d82d      	bhi.n	8004ca0 <__ssputs_r+0x70>
 8004c44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c4c:	d026      	beq.n	8004c9c <__ssputs_r+0x6c>
 8004c4e:	6965      	ldr	r5, [r4, #20]
 8004c50:	6909      	ldr	r1, [r1, #16]
 8004c52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c56:	eba3 0901 	sub.w	r9, r3, r1
 8004c5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c5e:	1c7b      	adds	r3, r7, #1
 8004c60:	444b      	add	r3, r9
 8004c62:	106d      	asrs	r5, r5, #1
 8004c64:	429d      	cmp	r5, r3
 8004c66:	bf38      	it	cc
 8004c68:	461d      	movcc	r5, r3
 8004c6a:	0553      	lsls	r3, r2, #21
 8004c6c:	d527      	bpl.n	8004cbe <__ssputs_r+0x8e>
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7ff ff52 	bl	8004b18 <_malloc_r>
 8004c74:	4606      	mov	r6, r0
 8004c76:	b360      	cbz	r0, 8004cd2 <__ssputs_r+0xa2>
 8004c78:	464a      	mov	r2, r9
 8004c7a:	6921      	ldr	r1, [r4, #16]
 8004c7c:	f7ff fed4 	bl	8004a28 <memcpy>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	6126      	str	r6, [r4, #16]
 8004c8e:	444e      	add	r6, r9
 8004c90:	6026      	str	r6, [r4, #0]
 8004c92:	463e      	mov	r6, r7
 8004c94:	6165      	str	r5, [r4, #20]
 8004c96:	eba5 0509 	sub.w	r5, r5, r9
 8004c9a:	60a5      	str	r5, [r4, #8]
 8004c9c:	42be      	cmp	r6, r7
 8004c9e:	d900      	bls.n	8004ca2 <__ssputs_r+0x72>
 8004ca0:	463e      	mov	r6, r7
 8004ca2:	4632      	mov	r2, r6
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	f000 fe33 	bl	8005912 <memmove>
 8004cac:	2000      	movs	r0, #0
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	1b9b      	subs	r3, r3, r6
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	4433      	add	r3, r6
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	f000 fe60 	bl	8005984 <_realloc_r>
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d1e0      	bne.n	8004c8c <__ssputs_r+0x5c>
 8004cca:	4650      	mov	r0, sl
 8004ccc:	6921      	ldr	r1, [r4, #16]
 8004cce:	f7ff feb9 	bl	8004a44 <_free_r>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	f8ca 3000 	str.w	r3, [sl]
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	e7e9      	b.n	8004cba <__ssputs_r+0x8a>
	...

08004ce8 <_svfiprintf_r>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	4698      	mov	r8, r3
 8004cee:	898b      	ldrh	r3, [r1, #12]
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	b09d      	sub	sp, #116	@ 0x74
 8004cfa:	d510      	bpl.n	8004d1e <_svfiprintf_r+0x36>
 8004cfc:	690b      	ldr	r3, [r1, #16]
 8004cfe:	b973      	cbnz	r3, 8004d1e <_svfiprintf_r+0x36>
 8004d00:	2140      	movs	r1, #64	@ 0x40
 8004d02:	f7ff ff09 	bl	8004b18 <_malloc_r>
 8004d06:	6028      	str	r0, [r5, #0]
 8004d08:	6128      	str	r0, [r5, #16]
 8004d0a:	b930      	cbnz	r0, 8004d1a <_svfiprintf_r+0x32>
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	b01d      	add	sp, #116	@ 0x74
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	2340      	movs	r3, #64	@ 0x40
 8004d1c:	616b      	str	r3, [r5, #20]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d22:	2320      	movs	r3, #32
 8004d24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d28:	2330      	movs	r3, #48	@ 0x30
 8004d2a:	f04f 0901 	mov.w	r9, #1
 8004d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ecc <_svfiprintf_r+0x1e4>
 8004d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	469a      	mov	sl, r3
 8004d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d42:	b10a      	cbz	r2, 8004d48 <_svfiprintf_r+0x60>
 8004d44:	2a25      	cmp	r2, #37	@ 0x25
 8004d46:	d1f9      	bne.n	8004d3c <_svfiprintf_r+0x54>
 8004d48:	ebba 0b04 	subs.w	fp, sl, r4
 8004d4c:	d00b      	beq.n	8004d66 <_svfiprintf_r+0x7e>
 8004d4e:	465b      	mov	r3, fp
 8004d50:	4622      	mov	r2, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	4638      	mov	r0, r7
 8004d56:	f7ff ff6b 	bl	8004c30 <__ssputs_r>
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f000 80a7 	beq.w	8004eae <_svfiprintf_r+0x1c6>
 8004d60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d62:	445a      	add	r2, fp
 8004d64:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d66:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 809f 	beq.w	8004eae <_svfiprintf_r+0x1c6>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f04f 32ff 	mov.w	r2, #4294967295
 8004d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d7a:	f10a 0a01 	add.w	sl, sl, #1
 8004d7e:	9304      	str	r3, [sp, #16]
 8004d80:	9307      	str	r3, [sp, #28]
 8004d82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d86:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d88:	4654      	mov	r4, sl
 8004d8a:	2205      	movs	r2, #5
 8004d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d90:	484e      	ldr	r0, [pc, #312]	@ (8004ecc <_svfiprintf_r+0x1e4>)
 8004d92:	f000 fde9 	bl	8005968 <memchr>
 8004d96:	9a04      	ldr	r2, [sp, #16]
 8004d98:	b9d8      	cbnz	r0, 8004dd2 <_svfiprintf_r+0xea>
 8004d9a:	06d0      	lsls	r0, r2, #27
 8004d9c:	bf44      	itt	mi
 8004d9e:	2320      	movmi	r3, #32
 8004da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da4:	0711      	lsls	r1, r2, #28
 8004da6:	bf44      	itt	mi
 8004da8:	232b      	movmi	r3, #43	@ 0x2b
 8004daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dae:	f89a 3000 	ldrb.w	r3, [sl]
 8004db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004db4:	d015      	beq.n	8004de2 <_svfiprintf_r+0xfa>
 8004db6:	4654      	mov	r4, sl
 8004db8:	2000      	movs	r0, #0
 8004dba:	f04f 0c0a 	mov.w	ip, #10
 8004dbe:	9a07      	ldr	r2, [sp, #28]
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dc6:	3b30      	subs	r3, #48	@ 0x30
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d94b      	bls.n	8004e64 <_svfiprintf_r+0x17c>
 8004dcc:	b1b0      	cbz	r0, 8004dfc <_svfiprintf_r+0x114>
 8004dce:	9207      	str	r2, [sp, #28]
 8004dd0:	e014      	b.n	8004dfc <_svfiprintf_r+0x114>
 8004dd2:	eba0 0308 	sub.w	r3, r0, r8
 8004dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	46a2      	mov	sl, r4
 8004dde:	9304      	str	r3, [sp, #16]
 8004de0:	e7d2      	b.n	8004d88 <_svfiprintf_r+0xa0>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	1d19      	adds	r1, r3, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	9103      	str	r1, [sp, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfbb      	ittet	lt
 8004dee:	425b      	neglt	r3, r3
 8004df0:	f042 0202 	orrlt.w	r2, r2, #2
 8004df4:	9307      	strge	r3, [sp, #28]
 8004df6:	9307      	strlt	r3, [sp, #28]
 8004df8:	bfb8      	it	lt
 8004dfa:	9204      	strlt	r2, [sp, #16]
 8004dfc:	7823      	ldrb	r3, [r4, #0]
 8004dfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e00:	d10a      	bne.n	8004e18 <_svfiprintf_r+0x130>
 8004e02:	7863      	ldrb	r3, [r4, #1]
 8004e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e06:	d132      	bne.n	8004e6e <_svfiprintf_r+0x186>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	3402      	adds	r4, #2
 8004e0c:	1d1a      	adds	r2, r3, #4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	9203      	str	r2, [sp, #12]
 8004e12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e16:	9305      	str	r3, [sp, #20]
 8004e18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004ed0 <_svfiprintf_r+0x1e8>
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	4650      	mov	r0, sl
 8004e20:	7821      	ldrb	r1, [r4, #0]
 8004e22:	f000 fda1 	bl	8005968 <memchr>
 8004e26:	b138      	cbz	r0, 8004e38 <_svfiprintf_r+0x150>
 8004e28:	2240      	movs	r2, #64	@ 0x40
 8004e2a:	9b04      	ldr	r3, [sp, #16]
 8004e2c:	eba0 000a 	sub.w	r0, r0, sl
 8004e30:	4082      	lsls	r2, r0
 8004e32:	4313      	orrs	r3, r2
 8004e34:	3401      	adds	r4, #1
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3c:	2206      	movs	r2, #6
 8004e3e:	4825      	ldr	r0, [pc, #148]	@ (8004ed4 <_svfiprintf_r+0x1ec>)
 8004e40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e44:	f000 fd90 	bl	8005968 <memchr>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d036      	beq.n	8004eba <_svfiprintf_r+0x1d2>
 8004e4c:	4b22      	ldr	r3, [pc, #136]	@ (8004ed8 <_svfiprintf_r+0x1f0>)
 8004e4e:	bb1b      	cbnz	r3, 8004e98 <_svfiprintf_r+0x1b0>
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	3307      	adds	r3, #7
 8004e54:	f023 0307 	bic.w	r3, r3, #7
 8004e58:	3308      	adds	r3, #8
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e5e:	4433      	add	r3, r6
 8004e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e62:	e76a      	b.n	8004d3a <_svfiprintf_r+0x52>
 8004e64:	460c      	mov	r4, r1
 8004e66:	2001      	movs	r0, #1
 8004e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e6c:	e7a8      	b.n	8004dc0 <_svfiprintf_r+0xd8>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f04f 0c0a 	mov.w	ip, #10
 8004e74:	4619      	mov	r1, r3
 8004e76:	3401      	adds	r4, #1
 8004e78:	9305      	str	r3, [sp, #20]
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e80:	3a30      	subs	r2, #48	@ 0x30
 8004e82:	2a09      	cmp	r2, #9
 8004e84:	d903      	bls.n	8004e8e <_svfiprintf_r+0x1a6>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0c6      	beq.n	8004e18 <_svfiprintf_r+0x130>
 8004e8a:	9105      	str	r1, [sp, #20]
 8004e8c:	e7c4      	b.n	8004e18 <_svfiprintf_r+0x130>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	2301      	movs	r3, #1
 8004e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e96:	e7f0      	b.n	8004e7a <_svfiprintf_r+0x192>
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	462a      	mov	r2, r5
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <_svfiprintf_r+0x1f4>)
 8004ea2:	a904      	add	r1, sp, #16
 8004ea4:	f3af 8000 	nop.w
 8004ea8:	1c42      	adds	r2, r0, #1
 8004eaa:	4606      	mov	r6, r0
 8004eac:	d1d6      	bne.n	8004e5c <_svfiprintf_r+0x174>
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	065b      	lsls	r3, r3, #25
 8004eb2:	f53f af2d 	bmi.w	8004d10 <_svfiprintf_r+0x28>
 8004eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eb8:	e72c      	b.n	8004d14 <_svfiprintf_r+0x2c>
 8004eba:	ab03      	add	r3, sp, #12
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <_svfiprintf_r+0x1f4>)
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	f000 fa47 	bl	8005358 <_printf_i>
 8004eca:	e7ed      	b.n	8004ea8 <_svfiprintf_r+0x1c0>
 8004ecc:	08005cc3 	.word	0x08005cc3
 8004ed0:	08005cc9 	.word	0x08005cc9
 8004ed4:	08005ccd 	.word	0x08005ccd
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c31 	.word	0x08004c31

08004ee0 <_sungetc_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	1c4b      	adds	r3, r1, #1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	d103      	bne.n	8004ef0 <_sungetc_r+0x10>
 8004ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8004eec:	4628      	mov	r0, r5
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	8993      	ldrh	r3, [r2, #12]
 8004ef2:	b2cd      	uxtb	r5, r1
 8004ef4:	f023 0320 	bic.w	r3, r3, #32
 8004ef8:	8193      	strh	r3, [r2, #12]
 8004efa:	6853      	ldr	r3, [r2, #4]
 8004efc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004efe:	b18a      	cbz	r2, 8004f24 <_sungetc_r+0x44>
 8004f00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004f02:	429a      	cmp	r2, r3
 8004f04:	dd08      	ble.n	8004f18 <_sungetc_r+0x38>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f10:	6863      	ldr	r3, [r4, #4]
 8004f12:	3301      	adds	r3, #1
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	e7e9      	b.n	8004eec <_sungetc_r+0xc>
 8004f18:	4621      	mov	r1, r4
 8004f1a:	f000 fcc2 	bl	80058a2 <__submore>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0f1      	beq.n	8004f06 <_sungetc_r+0x26>
 8004f22:	e7e1      	b.n	8004ee8 <_sungetc_r+0x8>
 8004f24:	6921      	ldr	r1, [r4, #16]
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	b141      	cbz	r1, 8004f3c <_sungetc_r+0x5c>
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d206      	bcs.n	8004f3c <_sungetc_r+0x5c>
 8004f2e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004f32:	42a9      	cmp	r1, r5
 8004f34:	d102      	bne.n	8004f3c <_sungetc_r+0x5c>
 8004f36:	3a01      	subs	r2, #1
 8004f38:	6022      	str	r2, [r4, #0]
 8004f3a:	e7ea      	b.n	8004f12 <_sungetc_r+0x32>
 8004f3c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f46:	2303      	movs	r3, #3
 8004f48:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	2301      	movs	r3, #1
 8004f54:	e7de      	b.n	8004f14 <_sungetc_r+0x34>

08004f56 <__ssrefill_r>:
 8004f56:	b510      	push	{r4, lr}
 8004f58:	460c      	mov	r4, r1
 8004f5a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004f5c:	b169      	cbz	r1, 8004f7a <__ssrefill_r+0x24>
 8004f5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f62:	4299      	cmp	r1, r3
 8004f64:	d001      	beq.n	8004f6a <__ssrefill_r+0x14>
 8004f66:	f7ff fd6d 	bl	8004a44 <_free_r>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f6e:	6360      	str	r0, [r4, #52]	@ 0x34
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	b113      	cbz	r3, 8004f7a <__ssrefill_r+0x24>
 8004f74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	6063      	str	r3, [r4, #4]
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f043 0320 	orr.w	r3, r3, #32
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	e7f3      	b.n	8004f78 <__ssrefill_r+0x22>

08004f90 <__ssvfiscanf_r>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	2100      	movs	r1, #0
 8004f98:	4606      	mov	r6, r0
 8004f9a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004f9e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004fa2:	49aa      	ldr	r1, [pc, #680]	@ (800524c <__ssvfiscanf_r+0x2bc>)
 8004fa4:	f10d 0804 	add.w	r8, sp, #4
 8004fa8:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004faa:	49a9      	ldr	r1, [pc, #676]	@ (8005250 <__ssvfiscanf_r+0x2c0>)
 8004fac:	4fa9      	ldr	r7, [pc, #676]	@ (8005254 <__ssvfiscanf_r+0x2c4>)
 8004fae:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004fb2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	7813      	ldrb	r3, [r2, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8159 	beq.w	8005270 <__ssvfiscanf_r+0x2e0>
 8004fbe:	5cf9      	ldrb	r1, [r7, r3]
 8004fc0:	1c55      	adds	r5, r2, #1
 8004fc2:	f011 0108 	ands.w	r1, r1, #8
 8004fc6:	d019      	beq.n	8004ffc <__ssvfiscanf_r+0x6c>
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	dd0f      	ble.n	8004fee <__ssvfiscanf_r+0x5e>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	5cba      	ldrb	r2, [r7, r2]
 8004fd4:	0712      	lsls	r2, r2, #28
 8004fd6:	d401      	bmi.n	8004fdc <__ssvfiscanf_r+0x4c>
 8004fd8:	462a      	mov	r2, r5
 8004fda:	e7ec      	b.n	8004fb6 <__ssvfiscanf_r+0x26>
 8004fdc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004fde:	3301      	adds	r3, #1
 8004fe0:	3201      	adds	r2, #1
 8004fe2:	9245      	str	r2, [sp, #276]	@ 0x114
 8004fe4:	6862      	ldr	r2, [r4, #4]
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	3a01      	subs	r2, #1
 8004fea:	6062      	str	r2, [r4, #4]
 8004fec:	e7ec      	b.n	8004fc8 <__ssvfiscanf_r+0x38>
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004ff4:	4798      	blx	r3
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d0e9      	beq.n	8004fce <__ssvfiscanf_r+0x3e>
 8004ffa:	e7ed      	b.n	8004fd8 <__ssvfiscanf_r+0x48>
 8004ffc:	2b25      	cmp	r3, #37	@ 0x25
 8004ffe:	d012      	beq.n	8005026 <__ssvfiscanf_r+0x96>
 8005000:	4699      	mov	r9, r3
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f340 8094 	ble.w	8005132 <__ssvfiscanf_r+0x1a2>
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	7813      	ldrb	r3, [r2, #0]
 800500e:	454b      	cmp	r3, r9
 8005010:	f040 812e 	bne.w	8005270 <__ssvfiscanf_r+0x2e0>
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	3201      	adds	r2, #1
 8005018:	3b01      	subs	r3, #1
 800501a:	6063      	str	r3, [r4, #4]
 800501c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	9345      	str	r3, [sp, #276]	@ 0x114
 8005024:	e7d8      	b.n	8004fd8 <__ssvfiscanf_r+0x48>
 8005026:	9141      	str	r1, [sp, #260]	@ 0x104
 8005028:	9143      	str	r1, [sp, #268]	@ 0x10c
 800502a:	7853      	ldrb	r3, [r2, #1]
 800502c:	2b2a      	cmp	r3, #42	@ 0x2a
 800502e:	bf04      	itt	eq
 8005030:	2310      	moveq	r3, #16
 8005032:	1c95      	addeq	r5, r2, #2
 8005034:	f04f 020a 	mov.w	r2, #10
 8005038:	bf08      	it	eq
 800503a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800503c:	46a9      	mov	r9, r5
 800503e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005042:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005046:	2b09      	cmp	r3, #9
 8005048:	d91e      	bls.n	8005088 <__ssvfiscanf_r+0xf8>
 800504a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8005258 <__ssvfiscanf_r+0x2c8>
 800504e:	2203      	movs	r2, #3
 8005050:	4650      	mov	r0, sl
 8005052:	f000 fc89 	bl	8005968 <memchr>
 8005056:	b138      	cbz	r0, 8005068 <__ssvfiscanf_r+0xd8>
 8005058:	2301      	movs	r3, #1
 800505a:	464d      	mov	r5, r9
 800505c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800505e:	eba0 000a 	sub.w	r0, r0, sl
 8005062:	4083      	lsls	r3, r0
 8005064:	4313      	orrs	r3, r2
 8005066:	9341      	str	r3, [sp, #260]	@ 0x104
 8005068:	f815 3b01 	ldrb.w	r3, [r5], #1
 800506c:	2b78      	cmp	r3, #120	@ 0x78
 800506e:	d806      	bhi.n	800507e <__ssvfiscanf_r+0xee>
 8005070:	2b57      	cmp	r3, #87	@ 0x57
 8005072:	d810      	bhi.n	8005096 <__ssvfiscanf_r+0x106>
 8005074:	2b25      	cmp	r3, #37	@ 0x25
 8005076:	d0c3      	beq.n	8005000 <__ssvfiscanf_r+0x70>
 8005078:	d856      	bhi.n	8005128 <__ssvfiscanf_r+0x198>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d064      	beq.n	8005148 <__ssvfiscanf_r+0x1b8>
 800507e:	2303      	movs	r3, #3
 8005080:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005082:	230a      	movs	r3, #10
 8005084:	9342      	str	r3, [sp, #264]	@ 0x108
 8005086:	e077      	b.n	8005178 <__ssvfiscanf_r+0x1e8>
 8005088:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800508a:	464d      	mov	r5, r9
 800508c:	fb02 1103 	mla	r1, r2, r3, r1
 8005090:	3930      	subs	r1, #48	@ 0x30
 8005092:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005094:	e7d2      	b.n	800503c <__ssvfiscanf_r+0xac>
 8005096:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800509a:	2a20      	cmp	r2, #32
 800509c:	d8ef      	bhi.n	800507e <__ssvfiscanf_r+0xee>
 800509e:	a101      	add	r1, pc, #4	@ (adr r1, 80050a4 <__ssvfiscanf_r+0x114>)
 80050a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050a4:	08005157 	.word	0x08005157
 80050a8:	0800507f 	.word	0x0800507f
 80050ac:	0800507f 	.word	0x0800507f
 80050b0:	080051b1 	.word	0x080051b1
 80050b4:	0800507f 	.word	0x0800507f
 80050b8:	0800507f 	.word	0x0800507f
 80050bc:	0800507f 	.word	0x0800507f
 80050c0:	0800507f 	.word	0x0800507f
 80050c4:	0800507f 	.word	0x0800507f
 80050c8:	0800507f 	.word	0x0800507f
 80050cc:	0800507f 	.word	0x0800507f
 80050d0:	080051c7 	.word	0x080051c7
 80050d4:	080051ad 	.word	0x080051ad
 80050d8:	0800512f 	.word	0x0800512f
 80050dc:	0800512f 	.word	0x0800512f
 80050e0:	0800512f 	.word	0x0800512f
 80050e4:	0800507f 	.word	0x0800507f
 80050e8:	08005169 	.word	0x08005169
 80050ec:	0800507f 	.word	0x0800507f
 80050f0:	0800507f 	.word	0x0800507f
 80050f4:	0800507f 	.word	0x0800507f
 80050f8:	0800507f 	.word	0x0800507f
 80050fc:	080051d7 	.word	0x080051d7
 8005100:	08005171 	.word	0x08005171
 8005104:	0800514f 	.word	0x0800514f
 8005108:	0800507f 	.word	0x0800507f
 800510c:	0800507f 	.word	0x0800507f
 8005110:	080051d3 	.word	0x080051d3
 8005114:	0800507f 	.word	0x0800507f
 8005118:	080051ad 	.word	0x080051ad
 800511c:	0800507f 	.word	0x0800507f
 8005120:	0800507f 	.word	0x0800507f
 8005124:	08005157 	.word	0x08005157
 8005128:	3b45      	subs	r3, #69	@ 0x45
 800512a:	2b02      	cmp	r3, #2
 800512c:	d8a7      	bhi.n	800507e <__ssvfiscanf_r+0xee>
 800512e:	2305      	movs	r3, #5
 8005130:	e021      	b.n	8005176 <__ssvfiscanf_r+0x1e6>
 8005132:	4621      	mov	r1, r4
 8005134:	4630      	mov	r0, r6
 8005136:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005138:	4798      	blx	r3
 800513a:	2800      	cmp	r0, #0
 800513c:	f43f af65 	beq.w	800500a <__ssvfiscanf_r+0x7a>
 8005140:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005142:	2800      	cmp	r0, #0
 8005144:	f040 808c 	bne.w	8005260 <__ssvfiscanf_r+0x2d0>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	e08c      	b.n	8005268 <__ssvfiscanf_r+0x2d8>
 800514e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005150:	f042 0220 	orr.w	r2, r2, #32
 8005154:	9241      	str	r2, [sp, #260]	@ 0x104
 8005156:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800515c:	9241      	str	r2, [sp, #260]	@ 0x104
 800515e:	2210      	movs	r2, #16
 8005160:	2b6e      	cmp	r3, #110	@ 0x6e
 8005162:	9242      	str	r2, [sp, #264]	@ 0x108
 8005164:	d902      	bls.n	800516c <__ssvfiscanf_r+0x1dc>
 8005166:	e005      	b.n	8005174 <__ssvfiscanf_r+0x1e4>
 8005168:	2300      	movs	r3, #0
 800516a:	9342      	str	r3, [sp, #264]	@ 0x108
 800516c:	2303      	movs	r3, #3
 800516e:	e002      	b.n	8005176 <__ssvfiscanf_r+0x1e6>
 8005170:	2308      	movs	r3, #8
 8005172:	9342      	str	r3, [sp, #264]	@ 0x108
 8005174:	2304      	movs	r3, #4
 8005176:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd39      	ble.n	80051f2 <__ssvfiscanf_r+0x262>
 800517e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005180:	0659      	lsls	r1, r3, #25
 8005182:	d404      	bmi.n	800518e <__ssvfiscanf_r+0x1fe>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	5cba      	ldrb	r2, [r7, r2]
 800518a:	0712      	lsls	r2, r2, #28
 800518c:	d438      	bmi.n	8005200 <__ssvfiscanf_r+0x270>
 800518e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005190:	2b02      	cmp	r3, #2
 8005192:	dc47      	bgt.n	8005224 <__ssvfiscanf_r+0x294>
 8005194:	466b      	mov	r3, sp
 8005196:	4622      	mov	r2, r4
 8005198:	4630      	mov	r0, r6
 800519a:	a941      	add	r1, sp, #260	@ 0x104
 800519c:	f000 f9fc 	bl	8005598 <_scanf_chars>
 80051a0:	2801      	cmp	r0, #1
 80051a2:	d065      	beq.n	8005270 <__ssvfiscanf_r+0x2e0>
 80051a4:	2802      	cmp	r0, #2
 80051a6:	f47f af17 	bne.w	8004fd8 <__ssvfiscanf_r+0x48>
 80051aa:	e7c9      	b.n	8005140 <__ssvfiscanf_r+0x1b0>
 80051ac:	220a      	movs	r2, #10
 80051ae:	e7d7      	b.n	8005160 <__ssvfiscanf_r+0x1d0>
 80051b0:	4629      	mov	r1, r5
 80051b2:	4640      	mov	r0, r8
 80051b4:	f000 fb3c 	bl	8005830 <__sccl>
 80051b8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80051ba:	4605      	mov	r5, r0
 80051bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c0:	9341      	str	r3, [sp, #260]	@ 0x104
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7d7      	b.n	8005176 <__ssvfiscanf_r+0x1e6>
 80051c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80051c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051cc:	9341      	str	r3, [sp, #260]	@ 0x104
 80051ce:	2300      	movs	r3, #0
 80051d0:	e7d1      	b.n	8005176 <__ssvfiscanf_r+0x1e6>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e7cf      	b.n	8005176 <__ssvfiscanf_r+0x1e6>
 80051d6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80051d8:	06c3      	lsls	r3, r0, #27
 80051da:	f53f aefd 	bmi.w	8004fd8 <__ssvfiscanf_r+0x48>
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051e2:	1d19      	adds	r1, r3, #4
 80051e4:	9100      	str	r1, [sp, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	07c0      	lsls	r0, r0, #31
 80051ea:	bf4c      	ite	mi
 80051ec:	801a      	strhmi	r2, [r3, #0]
 80051ee:	601a      	strpl	r2, [r3, #0]
 80051f0:	e6f2      	b.n	8004fd8 <__ssvfiscanf_r+0x48>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4630      	mov	r0, r6
 80051f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051f8:	4798      	blx	r3
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d0bf      	beq.n	800517e <__ssvfiscanf_r+0x1ee>
 80051fe:	e79f      	b.n	8005140 <__ssvfiscanf_r+0x1b0>
 8005200:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005202:	3201      	adds	r2, #1
 8005204:	9245      	str	r2, [sp, #276]	@ 0x114
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	3a01      	subs	r2, #1
 800520a:	2a00      	cmp	r2, #0
 800520c:	6062      	str	r2, [r4, #4]
 800520e:	dd02      	ble.n	8005216 <__ssvfiscanf_r+0x286>
 8005210:	3301      	adds	r3, #1
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e7b6      	b.n	8005184 <__ssvfiscanf_r+0x1f4>
 8005216:	4621      	mov	r1, r4
 8005218:	4630      	mov	r0, r6
 800521a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800521c:	4798      	blx	r3
 800521e:	2800      	cmp	r0, #0
 8005220:	d0b0      	beq.n	8005184 <__ssvfiscanf_r+0x1f4>
 8005222:	e78d      	b.n	8005140 <__ssvfiscanf_r+0x1b0>
 8005224:	2b04      	cmp	r3, #4
 8005226:	dc06      	bgt.n	8005236 <__ssvfiscanf_r+0x2a6>
 8005228:	466b      	mov	r3, sp
 800522a:	4622      	mov	r2, r4
 800522c:	4630      	mov	r0, r6
 800522e:	a941      	add	r1, sp, #260	@ 0x104
 8005230:	f000 fa0c 	bl	800564c <_scanf_i>
 8005234:	e7b4      	b.n	80051a0 <__ssvfiscanf_r+0x210>
 8005236:	4b09      	ldr	r3, [pc, #36]	@ (800525c <__ssvfiscanf_r+0x2cc>)
 8005238:	2b00      	cmp	r3, #0
 800523a:	f43f aecd 	beq.w	8004fd8 <__ssvfiscanf_r+0x48>
 800523e:	466b      	mov	r3, sp
 8005240:	4622      	mov	r2, r4
 8005242:	4630      	mov	r0, r6
 8005244:	a941      	add	r1, sp, #260	@ 0x104
 8005246:	f3af 8000 	nop.w
 800524a:	e7a9      	b.n	80051a0 <__ssvfiscanf_r+0x210>
 800524c:	08004ee1 	.word	0x08004ee1
 8005250:	08004f57 	.word	0x08004f57
 8005254:	08005d12 	.word	0x08005d12
 8005258:	08005cc9 	.word	0x08005cc9
 800525c:	00000000 	.word	0x00000000
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	065b      	lsls	r3, r3, #25
 8005264:	f53f af70 	bmi.w	8005148 <__ssvfiscanf_r+0x1b8>
 8005268:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005272:	e7f9      	b.n	8005268 <__ssvfiscanf_r+0x2d8>

08005274 <_printf_common>:
 8005274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	4616      	mov	r6, r2
 800527a:	4698      	mov	r8, r3
 800527c:	688a      	ldr	r2, [r1, #8]
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	4607      	mov	r7, r0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfb8      	it	lt
 8005286:	4613      	movlt	r3, r2
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800528e:	460c      	mov	r4, r1
 8005290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005294:	b10a      	cbz	r2, 800529a <_printf_common+0x26>
 8005296:	3301      	adds	r3, #1
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	0699      	lsls	r1, r3, #26
 800529e:	bf42      	ittt	mi
 80052a0:	6833      	ldrmi	r3, [r6, #0]
 80052a2:	3302      	addmi	r3, #2
 80052a4:	6033      	strmi	r3, [r6, #0]
 80052a6:	6825      	ldr	r5, [r4, #0]
 80052a8:	f015 0506 	ands.w	r5, r5, #6
 80052ac:	d106      	bne.n	80052bc <_printf_common+0x48>
 80052ae:	f104 0a19 	add.w	sl, r4, #25
 80052b2:	68e3      	ldr	r3, [r4, #12]
 80052b4:	6832      	ldr	r2, [r6, #0]
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	42ab      	cmp	r3, r5
 80052ba:	dc2b      	bgt.n	8005314 <_printf_common+0xa0>
 80052bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052c0:	6822      	ldr	r2, [r4, #0]
 80052c2:	3b00      	subs	r3, #0
 80052c4:	bf18      	it	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	0692      	lsls	r2, r2, #26
 80052ca:	d430      	bmi.n	800532e <_printf_common+0xba>
 80052cc:	4641      	mov	r1, r8
 80052ce:	4638      	mov	r0, r7
 80052d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052d4:	47c8      	blx	r9
 80052d6:	3001      	adds	r0, #1
 80052d8:	d023      	beq.n	8005322 <_printf_common+0xae>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	6922      	ldr	r2, [r4, #16]
 80052de:	f003 0306 	and.w	r3, r3, #6
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	bf14      	ite	ne
 80052e6:	2500      	movne	r5, #0
 80052e8:	6833      	ldreq	r3, [r6, #0]
 80052ea:	f04f 0600 	mov.w	r6, #0
 80052ee:	bf08      	it	eq
 80052f0:	68e5      	ldreq	r5, [r4, #12]
 80052f2:	f104 041a 	add.w	r4, r4, #26
 80052f6:	bf08      	it	eq
 80052f8:	1aed      	subeq	r5, r5, r3
 80052fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052fe:	bf08      	it	eq
 8005300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005304:	4293      	cmp	r3, r2
 8005306:	bfc4      	itt	gt
 8005308:	1a9b      	subgt	r3, r3, r2
 800530a:	18ed      	addgt	r5, r5, r3
 800530c:	42b5      	cmp	r5, r6
 800530e:	d11a      	bne.n	8005346 <_printf_common+0xd2>
 8005310:	2000      	movs	r0, #0
 8005312:	e008      	b.n	8005326 <_printf_common+0xb2>
 8005314:	2301      	movs	r3, #1
 8005316:	4652      	mov	r2, sl
 8005318:	4641      	mov	r1, r8
 800531a:	4638      	mov	r0, r7
 800531c:	47c8      	blx	r9
 800531e:	3001      	adds	r0, #1
 8005320:	d103      	bne.n	800532a <_printf_common+0xb6>
 8005322:	f04f 30ff 	mov.w	r0, #4294967295
 8005326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532a:	3501      	adds	r5, #1
 800532c:	e7c1      	b.n	80052b2 <_printf_common+0x3e>
 800532e:	2030      	movs	r0, #48	@ 0x30
 8005330:	18e1      	adds	r1, r4, r3
 8005332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800533c:	4422      	add	r2, r4
 800533e:	3302      	adds	r3, #2
 8005340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005344:	e7c2      	b.n	80052cc <_printf_common+0x58>
 8005346:	2301      	movs	r3, #1
 8005348:	4622      	mov	r2, r4
 800534a:	4641      	mov	r1, r8
 800534c:	4638      	mov	r0, r7
 800534e:	47c8      	blx	r9
 8005350:	3001      	adds	r0, #1
 8005352:	d0e6      	beq.n	8005322 <_printf_common+0xae>
 8005354:	3601      	adds	r6, #1
 8005356:	e7d9      	b.n	800530c <_printf_common+0x98>

08005358 <_printf_i>:
 8005358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	7e0f      	ldrb	r7, [r1, #24]
 800535e:	4691      	mov	r9, r2
 8005360:	2f78      	cmp	r7, #120	@ 0x78
 8005362:	4680      	mov	r8, r0
 8005364:	460c      	mov	r4, r1
 8005366:	469a      	mov	sl, r3
 8005368:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800536a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800536e:	d807      	bhi.n	8005380 <_printf_i+0x28>
 8005370:	2f62      	cmp	r7, #98	@ 0x62
 8005372:	d80a      	bhi.n	800538a <_printf_i+0x32>
 8005374:	2f00      	cmp	r7, #0
 8005376:	f000 80d3 	beq.w	8005520 <_printf_i+0x1c8>
 800537a:	2f58      	cmp	r7, #88	@ 0x58
 800537c:	f000 80ba 	beq.w	80054f4 <_printf_i+0x19c>
 8005380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005388:	e03a      	b.n	8005400 <_printf_i+0xa8>
 800538a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800538e:	2b15      	cmp	r3, #21
 8005390:	d8f6      	bhi.n	8005380 <_printf_i+0x28>
 8005392:	a101      	add	r1, pc, #4	@ (adr r1, 8005398 <_printf_i+0x40>)
 8005394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005398:	080053f1 	.word	0x080053f1
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005381 	.word	0x08005381
 80053a4:	08005381 	.word	0x08005381
 80053a8:	08005381 	.word	0x08005381
 80053ac:	08005381 	.word	0x08005381
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005381 	.word	0x08005381
 80053b8:	08005381 	.word	0x08005381
 80053bc:	08005381 	.word	0x08005381
 80053c0:	08005381 	.word	0x08005381
 80053c4:	08005507 	.word	0x08005507
 80053c8:	0800542f 	.word	0x0800542f
 80053cc:	080054c1 	.word	0x080054c1
 80053d0:	08005381 	.word	0x08005381
 80053d4:	08005381 	.word	0x08005381
 80053d8:	08005529 	.word	0x08005529
 80053dc:	08005381 	.word	0x08005381
 80053e0:	0800542f 	.word	0x0800542f
 80053e4:	08005381 	.word	0x08005381
 80053e8:	08005381 	.word	0x08005381
 80053ec:	080054c9 	.word	0x080054c9
 80053f0:	6833      	ldr	r3, [r6, #0]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6032      	str	r2, [r6, #0]
 80053f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005400:	2301      	movs	r3, #1
 8005402:	e09e      	b.n	8005542 <_printf_i+0x1ea>
 8005404:	6833      	ldr	r3, [r6, #0]
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1d19      	adds	r1, r3, #4
 800540a:	6031      	str	r1, [r6, #0]
 800540c:	0606      	lsls	r6, r0, #24
 800540e:	d501      	bpl.n	8005414 <_printf_i+0xbc>
 8005410:	681d      	ldr	r5, [r3, #0]
 8005412:	e003      	b.n	800541c <_printf_i+0xc4>
 8005414:	0645      	lsls	r5, r0, #25
 8005416:	d5fb      	bpl.n	8005410 <_printf_i+0xb8>
 8005418:	f9b3 5000 	ldrsh.w	r5, [r3]
 800541c:	2d00      	cmp	r5, #0
 800541e:	da03      	bge.n	8005428 <_printf_i+0xd0>
 8005420:	232d      	movs	r3, #45	@ 0x2d
 8005422:	426d      	negs	r5, r5
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005428:	230a      	movs	r3, #10
 800542a:	4859      	ldr	r0, [pc, #356]	@ (8005590 <_printf_i+0x238>)
 800542c:	e011      	b.n	8005452 <_printf_i+0xfa>
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	6833      	ldr	r3, [r6, #0]
 8005432:	0608      	lsls	r0, r1, #24
 8005434:	f853 5b04 	ldr.w	r5, [r3], #4
 8005438:	d402      	bmi.n	8005440 <_printf_i+0xe8>
 800543a:	0649      	lsls	r1, r1, #25
 800543c:	bf48      	it	mi
 800543e:	b2ad      	uxthmi	r5, r5
 8005440:	2f6f      	cmp	r7, #111	@ 0x6f
 8005442:	6033      	str	r3, [r6, #0]
 8005444:	bf14      	ite	ne
 8005446:	230a      	movne	r3, #10
 8005448:	2308      	moveq	r3, #8
 800544a:	4851      	ldr	r0, [pc, #324]	@ (8005590 <_printf_i+0x238>)
 800544c:	2100      	movs	r1, #0
 800544e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005452:	6866      	ldr	r6, [r4, #4]
 8005454:	2e00      	cmp	r6, #0
 8005456:	bfa8      	it	ge
 8005458:	6821      	ldrge	r1, [r4, #0]
 800545a:	60a6      	str	r6, [r4, #8]
 800545c:	bfa4      	itt	ge
 800545e:	f021 0104 	bicge.w	r1, r1, #4
 8005462:	6021      	strge	r1, [r4, #0]
 8005464:	b90d      	cbnz	r5, 800546a <_printf_i+0x112>
 8005466:	2e00      	cmp	r6, #0
 8005468:	d04b      	beq.n	8005502 <_printf_i+0x1aa>
 800546a:	4616      	mov	r6, r2
 800546c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005470:	fb03 5711 	mls	r7, r3, r1, r5
 8005474:	5dc7      	ldrb	r7, [r0, r7]
 8005476:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800547a:	462f      	mov	r7, r5
 800547c:	42bb      	cmp	r3, r7
 800547e:	460d      	mov	r5, r1
 8005480:	d9f4      	bls.n	800546c <_printf_i+0x114>
 8005482:	2b08      	cmp	r3, #8
 8005484:	d10b      	bne.n	800549e <_printf_i+0x146>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	07df      	lsls	r7, r3, #31
 800548a:	d508      	bpl.n	800549e <_printf_i+0x146>
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	6861      	ldr	r1, [r4, #4]
 8005490:	4299      	cmp	r1, r3
 8005492:	bfde      	ittt	le
 8005494:	2330      	movle	r3, #48	@ 0x30
 8005496:	f806 3c01 	strble.w	r3, [r6, #-1]
 800549a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800549e:	1b92      	subs	r2, r2, r6
 80054a0:	6122      	str	r2, [r4, #16]
 80054a2:	464b      	mov	r3, r9
 80054a4:	4621      	mov	r1, r4
 80054a6:	4640      	mov	r0, r8
 80054a8:	f8cd a000 	str.w	sl, [sp]
 80054ac:	aa03      	add	r2, sp, #12
 80054ae:	f7ff fee1 	bl	8005274 <_printf_common>
 80054b2:	3001      	adds	r0, #1
 80054b4:	d14a      	bne.n	800554c <_printf_i+0x1f4>
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	b004      	add	sp, #16
 80054bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	f043 0320 	orr.w	r3, r3, #32
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	2778      	movs	r7, #120	@ 0x78
 80054ca:	4832      	ldr	r0, [pc, #200]	@ (8005594 <_printf_i+0x23c>)
 80054cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	6831      	ldr	r1, [r6, #0]
 80054d4:	061f      	lsls	r7, r3, #24
 80054d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80054da:	d402      	bmi.n	80054e2 <_printf_i+0x18a>
 80054dc:	065f      	lsls	r7, r3, #25
 80054de:	bf48      	it	mi
 80054e0:	b2ad      	uxthmi	r5, r5
 80054e2:	6031      	str	r1, [r6, #0]
 80054e4:	07d9      	lsls	r1, r3, #31
 80054e6:	bf44      	itt	mi
 80054e8:	f043 0320 	orrmi.w	r3, r3, #32
 80054ec:	6023      	strmi	r3, [r4, #0]
 80054ee:	b11d      	cbz	r5, 80054f8 <_printf_i+0x1a0>
 80054f0:	2310      	movs	r3, #16
 80054f2:	e7ab      	b.n	800544c <_printf_i+0xf4>
 80054f4:	4826      	ldr	r0, [pc, #152]	@ (8005590 <_printf_i+0x238>)
 80054f6:	e7e9      	b.n	80054cc <_printf_i+0x174>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f023 0320 	bic.w	r3, r3, #32
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	e7f6      	b.n	80054f0 <_printf_i+0x198>
 8005502:	4616      	mov	r6, r2
 8005504:	e7bd      	b.n	8005482 <_printf_i+0x12a>
 8005506:	6833      	ldr	r3, [r6, #0]
 8005508:	6825      	ldr	r5, [r4, #0]
 800550a:	1d18      	adds	r0, r3, #4
 800550c:	6961      	ldr	r1, [r4, #20]
 800550e:	6030      	str	r0, [r6, #0]
 8005510:	062e      	lsls	r6, r5, #24
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	d501      	bpl.n	800551a <_printf_i+0x1c2>
 8005516:	6019      	str	r1, [r3, #0]
 8005518:	e002      	b.n	8005520 <_printf_i+0x1c8>
 800551a:	0668      	lsls	r0, r5, #25
 800551c:	d5fb      	bpl.n	8005516 <_printf_i+0x1be>
 800551e:	8019      	strh	r1, [r3, #0]
 8005520:	2300      	movs	r3, #0
 8005522:	4616      	mov	r6, r2
 8005524:	6123      	str	r3, [r4, #16]
 8005526:	e7bc      	b.n	80054a2 <_printf_i+0x14a>
 8005528:	6833      	ldr	r3, [r6, #0]
 800552a:	2100      	movs	r1, #0
 800552c:	1d1a      	adds	r2, r3, #4
 800552e:	6032      	str	r2, [r6, #0]
 8005530:	681e      	ldr	r6, [r3, #0]
 8005532:	6862      	ldr	r2, [r4, #4]
 8005534:	4630      	mov	r0, r6
 8005536:	f000 fa17 	bl	8005968 <memchr>
 800553a:	b108      	cbz	r0, 8005540 <_printf_i+0x1e8>
 800553c:	1b80      	subs	r0, r0, r6
 800553e:	6060      	str	r0, [r4, #4]
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	2300      	movs	r3, #0
 8005546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800554a:	e7aa      	b.n	80054a2 <_printf_i+0x14a>
 800554c:	4632      	mov	r2, r6
 800554e:	4649      	mov	r1, r9
 8005550:	4640      	mov	r0, r8
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	47d0      	blx	sl
 8005556:	3001      	adds	r0, #1
 8005558:	d0ad      	beq.n	80054b6 <_printf_i+0x15e>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	079b      	lsls	r3, r3, #30
 800555e:	d413      	bmi.n	8005588 <_printf_i+0x230>
 8005560:	68e0      	ldr	r0, [r4, #12]
 8005562:	9b03      	ldr	r3, [sp, #12]
 8005564:	4298      	cmp	r0, r3
 8005566:	bfb8      	it	lt
 8005568:	4618      	movlt	r0, r3
 800556a:	e7a6      	b.n	80054ba <_printf_i+0x162>
 800556c:	2301      	movs	r3, #1
 800556e:	4632      	mov	r2, r6
 8005570:	4649      	mov	r1, r9
 8005572:	4640      	mov	r0, r8
 8005574:	47d0      	blx	sl
 8005576:	3001      	adds	r0, #1
 8005578:	d09d      	beq.n	80054b6 <_printf_i+0x15e>
 800557a:	3501      	adds	r5, #1
 800557c:	68e3      	ldr	r3, [r4, #12]
 800557e:	9903      	ldr	r1, [sp, #12]
 8005580:	1a5b      	subs	r3, r3, r1
 8005582:	42ab      	cmp	r3, r5
 8005584:	dcf2      	bgt.n	800556c <_printf_i+0x214>
 8005586:	e7eb      	b.n	8005560 <_printf_i+0x208>
 8005588:	2500      	movs	r5, #0
 800558a:	f104 0619 	add.w	r6, r4, #25
 800558e:	e7f5      	b.n	800557c <_printf_i+0x224>
 8005590:	08005cd4 	.word	0x08005cd4
 8005594:	08005ce5 	.word	0x08005ce5

08005598 <_scanf_chars>:
 8005598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800559c:	4615      	mov	r5, r2
 800559e:	688a      	ldr	r2, [r1, #8]
 80055a0:	4680      	mov	r8, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	b932      	cbnz	r2, 80055b4 <_scanf_chars+0x1c>
 80055a6:	698a      	ldr	r2, [r1, #24]
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	bf14      	ite	ne
 80055ac:	f04f 32ff 	movne.w	r2, #4294967295
 80055b0:	2201      	moveq	r2, #1
 80055b2:	608a      	str	r2, [r1, #8]
 80055b4:	2700      	movs	r7, #0
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8005648 <_scanf_chars+0xb0>
 80055bc:	06d1      	lsls	r1, r2, #27
 80055be:	bf5f      	itttt	pl
 80055c0:	681a      	ldrpl	r2, [r3, #0]
 80055c2:	1d11      	addpl	r1, r2, #4
 80055c4:	6019      	strpl	r1, [r3, #0]
 80055c6:	6816      	ldrpl	r6, [r2, #0]
 80055c8:	69a0      	ldr	r0, [r4, #24]
 80055ca:	b188      	cbz	r0, 80055f0 <_scanf_chars+0x58>
 80055cc:	2801      	cmp	r0, #1
 80055ce:	d107      	bne.n	80055e0 <_scanf_chars+0x48>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	6963      	ldr	r3, [r4, #20]
 80055d6:	5c9b      	ldrb	r3, [r3, r2]
 80055d8:	b953      	cbnz	r3, 80055f0 <_scanf_chars+0x58>
 80055da:	2f00      	cmp	r7, #0
 80055dc:	d031      	beq.n	8005642 <_scanf_chars+0xaa>
 80055de:	e022      	b.n	8005626 <_scanf_chars+0x8e>
 80055e0:	2802      	cmp	r0, #2
 80055e2:	d120      	bne.n	8005626 <_scanf_chars+0x8e>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80055ec:	071b      	lsls	r3, r3, #28
 80055ee:	d41a      	bmi.n	8005626 <_scanf_chars+0x8e>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	3701      	adds	r7, #1
 80055f4:	06da      	lsls	r2, r3, #27
 80055f6:	bf5e      	ittt	pl
 80055f8:	682b      	ldrpl	r3, [r5, #0]
 80055fa:	781b      	ldrbpl	r3, [r3, #0]
 80055fc:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005600:	682a      	ldr	r2, [r5, #0]
 8005602:	686b      	ldr	r3, [r5, #4]
 8005604:	3201      	adds	r2, #1
 8005606:	602a      	str	r2, [r5, #0]
 8005608:	68a2      	ldr	r2, [r4, #8]
 800560a:	3b01      	subs	r3, #1
 800560c:	3a01      	subs	r2, #1
 800560e:	606b      	str	r3, [r5, #4]
 8005610:	60a2      	str	r2, [r4, #8]
 8005612:	b142      	cbz	r2, 8005626 <_scanf_chars+0x8e>
 8005614:	2b00      	cmp	r3, #0
 8005616:	dcd7      	bgt.n	80055c8 <_scanf_chars+0x30>
 8005618:	4629      	mov	r1, r5
 800561a:	4640      	mov	r0, r8
 800561c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005620:	4798      	blx	r3
 8005622:	2800      	cmp	r0, #0
 8005624:	d0d0      	beq.n	80055c8 <_scanf_chars+0x30>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	f013 0310 	ands.w	r3, r3, #16
 800562c:	d105      	bne.n	800563a <_scanf_chars+0xa2>
 800562e:	68e2      	ldr	r2, [r4, #12]
 8005630:	3201      	adds	r2, #1
 8005632:	60e2      	str	r2, [r4, #12]
 8005634:	69a2      	ldr	r2, [r4, #24]
 8005636:	b102      	cbz	r2, 800563a <_scanf_chars+0xa2>
 8005638:	7033      	strb	r3, [r6, #0]
 800563a:	2000      	movs	r0, #0
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	443b      	add	r3, r7
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005646:	bf00      	nop
 8005648:	08005d12 	.word	0x08005d12

0800564c <_scanf_i>:
 800564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	460c      	mov	r4, r1
 8005652:	4698      	mov	r8, r3
 8005654:	4b72      	ldr	r3, [pc, #456]	@ (8005820 <_scanf_i+0x1d4>)
 8005656:	b087      	sub	sp, #28
 8005658:	4682      	mov	sl, r0
 800565a:	4616      	mov	r6, r2
 800565c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005660:	ab03      	add	r3, sp, #12
 8005662:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005666:	4b6f      	ldr	r3, [pc, #444]	@ (8005824 <_scanf_i+0x1d8>)
 8005668:	69a1      	ldr	r1, [r4, #24]
 800566a:	4a6f      	ldr	r2, [pc, #444]	@ (8005828 <_scanf_i+0x1dc>)
 800566c:	4627      	mov	r7, r4
 800566e:	2903      	cmp	r1, #3
 8005670:	bf08      	it	eq
 8005672:	461a      	moveq	r2, r3
 8005674:	68a3      	ldr	r3, [r4, #8]
 8005676:	9201      	str	r2, [sp, #4]
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800567e:	bf81      	itttt	hi
 8005680:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005684:	eb03 0905 	addhi.w	r9, r3, r5
 8005688:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800568c:	60a3      	strhi	r3, [r4, #8]
 800568e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005692:	bf98      	it	ls
 8005694:	f04f 0900 	movls.w	r9, #0
 8005698:	463d      	mov	r5, r7
 800569a:	f04f 0b00 	mov.w	fp, #0
 800569e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80056a2:	6023      	str	r3, [r4, #0]
 80056a4:	6831      	ldr	r1, [r6, #0]
 80056a6:	ab03      	add	r3, sp, #12
 80056a8:	2202      	movs	r2, #2
 80056aa:	7809      	ldrb	r1, [r1, #0]
 80056ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80056b0:	f000 f95a 	bl	8005968 <memchr>
 80056b4:	b328      	cbz	r0, 8005702 <_scanf_i+0xb6>
 80056b6:	f1bb 0f01 	cmp.w	fp, #1
 80056ba:	d159      	bne.n	8005770 <_scanf_i+0x124>
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	b92a      	cbnz	r2, 80056cc <_scanf_i+0x80>
 80056c0:	2108      	movs	r1, #8
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	6061      	str	r1, [r4, #4]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80056d2:	6022      	str	r2, [r4, #0]
 80056d4:	68a2      	ldr	r2, [r4, #8]
 80056d6:	1e51      	subs	r1, r2, #1
 80056d8:	60a1      	str	r1, [r4, #8]
 80056da:	b192      	cbz	r2, 8005702 <_scanf_i+0xb6>
 80056dc:	6832      	ldr	r2, [r6, #0]
 80056de:	1c51      	adds	r1, r2, #1
 80056e0:	6031      	str	r1, [r6, #0]
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	f805 2b01 	strb.w	r2, [r5], #1
 80056e8:	6872      	ldr	r2, [r6, #4]
 80056ea:	3a01      	subs	r2, #1
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	6072      	str	r2, [r6, #4]
 80056f0:	dc07      	bgt.n	8005702 <_scanf_i+0xb6>
 80056f2:	4631      	mov	r1, r6
 80056f4:	4650      	mov	r0, sl
 80056f6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80056fa:	4790      	blx	r2
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f040 8085 	bne.w	800580c <_scanf_i+0x1c0>
 8005702:	f10b 0b01 	add.w	fp, fp, #1
 8005706:	f1bb 0f03 	cmp.w	fp, #3
 800570a:	d1cb      	bne.n	80056a4 <_scanf_i+0x58>
 800570c:	6863      	ldr	r3, [r4, #4]
 800570e:	b90b      	cbnz	r3, 8005714 <_scanf_i+0xc8>
 8005710:	230a      	movs	r3, #10
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	4945      	ldr	r1, [pc, #276]	@ (800582c <_scanf_i+0x1e0>)
 8005718:	6960      	ldr	r0, [r4, #20]
 800571a:	1ac9      	subs	r1, r1, r3
 800571c:	f000 f888 	bl	8005830 <__sccl>
 8005720:	f04f 0b00 	mov.w	fp, #0
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d03d      	beq.n	80057a8 <_scanf_i+0x15c>
 800572c:	6831      	ldr	r1, [r6, #0]
 800572e:	6960      	ldr	r0, [r4, #20]
 8005730:	f891 c000 	ldrb.w	ip, [r1]
 8005734:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005738:	2800      	cmp	r0, #0
 800573a:	d035      	beq.n	80057a8 <_scanf_i+0x15c>
 800573c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005740:	d124      	bne.n	800578c <_scanf_i+0x140>
 8005742:	0510      	lsls	r0, r2, #20
 8005744:	d522      	bpl.n	800578c <_scanf_i+0x140>
 8005746:	f10b 0b01 	add.w	fp, fp, #1
 800574a:	f1b9 0f00 	cmp.w	r9, #0
 800574e:	d003      	beq.n	8005758 <_scanf_i+0x10c>
 8005750:	3301      	adds	r3, #1
 8005752:	f109 39ff 	add.w	r9, r9, #4294967295
 8005756:	60a3      	str	r3, [r4, #8]
 8005758:	6873      	ldr	r3, [r6, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	6073      	str	r3, [r6, #4]
 8005760:	dd1b      	ble.n	800579a <_scanf_i+0x14e>
 8005762:	6833      	ldr	r3, [r6, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	68a3      	ldr	r3, [r4, #8]
 800576a:	3b01      	subs	r3, #1
 800576c:	60a3      	str	r3, [r4, #8]
 800576e:	e7d9      	b.n	8005724 <_scanf_i+0xd8>
 8005770:	f1bb 0f02 	cmp.w	fp, #2
 8005774:	d1ae      	bne.n	80056d4 <_scanf_i+0x88>
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800577c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005780:	d1bf      	bne.n	8005702 <_scanf_i+0xb6>
 8005782:	2110      	movs	r1, #16
 8005784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005788:	6061      	str	r1, [r4, #4]
 800578a:	e7a2      	b.n	80056d2 <_scanf_i+0x86>
 800578c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	780b      	ldrb	r3, [r1, #0]
 8005794:	f805 3b01 	strb.w	r3, [r5], #1
 8005798:	e7de      	b.n	8005758 <_scanf_i+0x10c>
 800579a:	4631      	mov	r1, r6
 800579c:	4650      	mov	r0, sl
 800579e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80057a2:	4798      	blx	r3
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0df      	beq.n	8005768 <_scanf_i+0x11c>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	05d9      	lsls	r1, r3, #23
 80057ac:	d50d      	bpl.n	80057ca <_scanf_i+0x17e>
 80057ae:	42bd      	cmp	r5, r7
 80057b0:	d909      	bls.n	80057c6 <_scanf_i+0x17a>
 80057b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80057b6:	4632      	mov	r2, r6
 80057b8:	4650      	mov	r0, sl
 80057ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057be:	f105 39ff 	add.w	r9, r5, #4294967295
 80057c2:	4798      	blx	r3
 80057c4:	464d      	mov	r5, r9
 80057c6:	42bd      	cmp	r5, r7
 80057c8:	d028      	beq.n	800581c <_scanf_i+0x1d0>
 80057ca:	6822      	ldr	r2, [r4, #0]
 80057cc:	f012 0210 	ands.w	r2, r2, #16
 80057d0:	d113      	bne.n	80057fa <_scanf_i+0x1ae>
 80057d2:	702a      	strb	r2, [r5, #0]
 80057d4:	4639      	mov	r1, r7
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	4650      	mov	r0, sl
 80057da:	9e01      	ldr	r6, [sp, #4]
 80057dc:	47b0      	blx	r6
 80057de:	f8d8 3000 	ldr.w	r3, [r8]
 80057e2:	6821      	ldr	r1, [r4, #0]
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	f8c8 2000 	str.w	r2, [r8]
 80057ea:	f011 0f20 	tst.w	r1, #32
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	d00f      	beq.n	8005812 <_scanf_i+0x1c6>
 80057f2:	6018      	str	r0, [r3, #0]
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60e3      	str	r3, [r4, #12]
 80057fa:	2000      	movs	r0, #0
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	1bed      	subs	r5, r5, r7
 8005800:	445d      	add	r5, fp
 8005802:	442b      	add	r3, r5
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	b007      	add	sp, #28
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580c:	f04f 0b00 	mov.w	fp, #0
 8005810:	e7ca      	b.n	80057a8 <_scanf_i+0x15c>
 8005812:	07ca      	lsls	r2, r1, #31
 8005814:	bf4c      	ite	mi
 8005816:	8018      	strhmi	r0, [r3, #0]
 8005818:	6018      	strpl	r0, [r3, #0]
 800581a:	e7eb      	b.n	80057f4 <_scanf_i+0x1a8>
 800581c:	2001      	movs	r0, #1
 800581e:	e7f2      	b.n	8005806 <_scanf_i+0x1ba>
 8005820:	08005c68 	.word	0x08005c68
 8005824:	08005ad5 	.word	0x08005ad5
 8005828:	08005bb5 	.word	0x08005bb5
 800582c:	08005d06 	.word	0x08005d06

08005830 <__sccl>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	780b      	ldrb	r3, [r1, #0]
 8005834:	4604      	mov	r4, r0
 8005836:	2b5e      	cmp	r3, #94	@ 0x5e
 8005838:	bf0b      	itete	eq
 800583a:	784b      	ldrbeq	r3, [r1, #1]
 800583c:	1c4a      	addne	r2, r1, #1
 800583e:	1c8a      	addeq	r2, r1, #2
 8005840:	2100      	movne	r1, #0
 8005842:	bf08      	it	eq
 8005844:	2101      	moveq	r1, #1
 8005846:	3801      	subs	r0, #1
 8005848:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800584c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005850:	42a8      	cmp	r0, r5
 8005852:	d1fb      	bne.n	800584c <__sccl+0x1c>
 8005854:	b90b      	cbnz	r3, 800585a <__sccl+0x2a>
 8005856:	1e50      	subs	r0, r2, #1
 8005858:	bd70      	pop	{r4, r5, r6, pc}
 800585a:	f081 0101 	eor.w	r1, r1, #1
 800585e:	4610      	mov	r0, r2
 8005860:	54e1      	strb	r1, [r4, r3]
 8005862:	4602      	mov	r2, r0
 8005864:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005868:	2d2d      	cmp	r5, #45	@ 0x2d
 800586a:	d005      	beq.n	8005878 <__sccl+0x48>
 800586c:	2d5d      	cmp	r5, #93	@ 0x5d
 800586e:	d016      	beq.n	800589e <__sccl+0x6e>
 8005870:	2d00      	cmp	r5, #0
 8005872:	d0f1      	beq.n	8005858 <__sccl+0x28>
 8005874:	462b      	mov	r3, r5
 8005876:	e7f2      	b.n	800585e <__sccl+0x2e>
 8005878:	7846      	ldrb	r6, [r0, #1]
 800587a:	2e5d      	cmp	r6, #93	@ 0x5d
 800587c:	d0fa      	beq.n	8005874 <__sccl+0x44>
 800587e:	42b3      	cmp	r3, r6
 8005880:	dcf8      	bgt.n	8005874 <__sccl+0x44>
 8005882:	461a      	mov	r2, r3
 8005884:	3002      	adds	r0, #2
 8005886:	3201      	adds	r2, #1
 8005888:	4296      	cmp	r6, r2
 800588a:	54a1      	strb	r1, [r4, r2]
 800588c:	dcfb      	bgt.n	8005886 <__sccl+0x56>
 800588e:	1af2      	subs	r2, r6, r3
 8005890:	3a01      	subs	r2, #1
 8005892:	42b3      	cmp	r3, r6
 8005894:	bfa8      	it	ge
 8005896:	2200      	movge	r2, #0
 8005898:	1c5d      	adds	r5, r3, #1
 800589a:	18ab      	adds	r3, r5, r2
 800589c:	e7e1      	b.n	8005862 <__sccl+0x32>
 800589e:	4610      	mov	r0, r2
 80058a0:	e7da      	b.n	8005858 <__sccl+0x28>

080058a2 <__submore>:
 80058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	460c      	mov	r4, r1
 80058a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80058aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058ae:	4299      	cmp	r1, r3
 80058b0:	d11b      	bne.n	80058ea <__submore+0x48>
 80058b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058b6:	f7ff f92f 	bl	8004b18 <_malloc_r>
 80058ba:	b918      	cbnz	r0, 80058c4 <__submore+0x22>
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80058ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80058ce:	6360      	str	r0, [r4, #52]	@ 0x34
 80058d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80058d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80058d8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80058dc:	7043      	strb	r3, [r0, #1]
 80058de:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80058e2:	7003      	strb	r3, [r0, #0]
 80058e4:	6020      	str	r0, [r4, #0]
 80058e6:	2000      	movs	r0, #0
 80058e8:	e7ea      	b.n	80058c0 <__submore+0x1e>
 80058ea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80058ec:	0077      	lsls	r7, r6, #1
 80058ee:	463a      	mov	r2, r7
 80058f0:	f000 f848 	bl	8005984 <_realloc_r>
 80058f4:	4605      	mov	r5, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0e0      	beq.n	80058bc <__submore+0x1a>
 80058fa:	eb00 0806 	add.w	r8, r0, r6
 80058fe:	4601      	mov	r1, r0
 8005900:	4632      	mov	r2, r6
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff f890 	bl	8004a28 <memcpy>
 8005908:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800590c:	f8c4 8000 	str.w	r8, [r4]
 8005910:	e7e9      	b.n	80058e6 <__submore+0x44>

08005912 <memmove>:
 8005912:	4288      	cmp	r0, r1
 8005914:	b510      	push	{r4, lr}
 8005916:	eb01 0402 	add.w	r4, r1, r2
 800591a:	d902      	bls.n	8005922 <memmove+0x10>
 800591c:	4284      	cmp	r4, r0
 800591e:	4623      	mov	r3, r4
 8005920:	d807      	bhi.n	8005932 <memmove+0x20>
 8005922:	1e43      	subs	r3, r0, #1
 8005924:	42a1      	cmp	r1, r4
 8005926:	d008      	beq.n	800593a <memmove+0x28>
 8005928:	f811 2b01 	ldrb.w	r2, [r1], #1
 800592c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005930:	e7f8      	b.n	8005924 <memmove+0x12>
 8005932:	4601      	mov	r1, r0
 8005934:	4402      	add	r2, r0
 8005936:	428a      	cmp	r2, r1
 8005938:	d100      	bne.n	800593c <memmove+0x2a>
 800593a:	bd10      	pop	{r4, pc}
 800593c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005940:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005944:	e7f7      	b.n	8005936 <memmove+0x24>
	...

08005948 <_sbrk_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	2300      	movs	r3, #0
 800594c:	4d05      	ldr	r5, [pc, #20]	@ (8005964 <_sbrk_r+0x1c>)
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fb faf0 	bl	8000f38 <_sbrk>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_sbrk_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_sbrk_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20002818 	.word	0x20002818

08005968 <memchr>:
 8005968:	4603      	mov	r3, r0
 800596a:	b510      	push	{r4, lr}
 800596c:	b2c9      	uxtb	r1, r1
 800596e:	4402      	add	r2, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	4618      	mov	r0, r3
 8005974:	d101      	bne.n	800597a <memchr+0x12>
 8005976:	2000      	movs	r0, #0
 8005978:	e003      	b.n	8005982 <memchr+0x1a>
 800597a:	7804      	ldrb	r4, [r0, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	428c      	cmp	r4, r1
 8005980:	d1f6      	bne.n	8005970 <memchr+0x8>
 8005982:	bd10      	pop	{r4, pc}

08005984 <_realloc_r>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	4680      	mov	r8, r0
 800598a:	4615      	mov	r5, r2
 800598c:	460c      	mov	r4, r1
 800598e:	b921      	cbnz	r1, 800599a <_realloc_r+0x16>
 8005990:	4611      	mov	r1, r2
 8005992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005996:	f7ff b8bf 	b.w	8004b18 <_malloc_r>
 800599a:	b92a      	cbnz	r2, 80059a8 <_realloc_r+0x24>
 800599c:	f7ff f852 	bl	8004a44 <_free_r>
 80059a0:	2400      	movs	r4, #0
 80059a2:	4620      	mov	r0, r4
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	f000 f906 	bl	8005bb8 <_malloc_usable_size_r>
 80059ac:	4285      	cmp	r5, r0
 80059ae:	4606      	mov	r6, r0
 80059b0:	d802      	bhi.n	80059b8 <_realloc_r+0x34>
 80059b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80059b6:	d8f4      	bhi.n	80059a2 <_realloc_r+0x1e>
 80059b8:	4629      	mov	r1, r5
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff f8ac 	bl	8004b18 <_malloc_r>
 80059c0:	4607      	mov	r7, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d0ec      	beq.n	80059a0 <_realloc_r+0x1c>
 80059c6:	42b5      	cmp	r5, r6
 80059c8:	462a      	mov	r2, r5
 80059ca:	4621      	mov	r1, r4
 80059cc:	bf28      	it	cs
 80059ce:	4632      	movcs	r2, r6
 80059d0:	f7ff f82a 	bl	8004a28 <memcpy>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff f834 	bl	8004a44 <_free_r>
 80059dc:	463c      	mov	r4, r7
 80059de:	e7e0      	b.n	80059a2 <_realloc_r+0x1e>

080059e0 <_strtol_l.constprop.0>:
 80059e0:	2b24      	cmp	r3, #36	@ 0x24
 80059e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e6:	4686      	mov	lr, r0
 80059e8:	4690      	mov	r8, r2
 80059ea:	d801      	bhi.n	80059f0 <_strtol_l.constprop.0+0x10>
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d106      	bne.n	80059fe <_strtol_l.constprop.0+0x1e>
 80059f0:	f7fe ffee 	bl	80049d0 <__errno>
 80059f4:	2316      	movs	r3, #22
 80059f6:	6003      	str	r3, [r0, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	460d      	mov	r5, r1
 8005a00:	4833      	ldr	r0, [pc, #204]	@ (8005ad0 <_strtol_l.constprop.0+0xf0>)
 8005a02:	462a      	mov	r2, r5
 8005a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a08:	5d06      	ldrb	r6, [r0, r4]
 8005a0a:	f016 0608 	ands.w	r6, r6, #8
 8005a0e:	d1f8      	bne.n	8005a02 <_strtol_l.constprop.0+0x22>
 8005a10:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a12:	d12d      	bne.n	8005a70 <_strtol_l.constprop.0+0x90>
 8005a14:	2601      	movs	r6, #1
 8005a16:	782c      	ldrb	r4, [r5, #0]
 8005a18:	1c95      	adds	r5, r2, #2
 8005a1a:	f033 0210 	bics.w	r2, r3, #16
 8005a1e:	d109      	bne.n	8005a34 <_strtol_l.constprop.0+0x54>
 8005a20:	2c30      	cmp	r4, #48	@ 0x30
 8005a22:	d12a      	bne.n	8005a7a <_strtol_l.constprop.0+0x9a>
 8005a24:	782a      	ldrb	r2, [r5, #0]
 8005a26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a2a:	2a58      	cmp	r2, #88	@ 0x58
 8005a2c:	d125      	bne.n	8005a7a <_strtol_l.constprop.0+0x9a>
 8005a2e:	2310      	movs	r3, #16
 8005a30:	786c      	ldrb	r4, [r5, #1]
 8005a32:	3502      	adds	r5, #2
 8005a34:	2200      	movs	r2, #0
 8005a36:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005a3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a3e:	fbbc f9f3 	udiv	r9, ip, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005a4c:	2f09      	cmp	r7, #9
 8005a4e:	d81b      	bhi.n	8005a88 <_strtol_l.constprop.0+0xa8>
 8005a50:	463c      	mov	r4, r7
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	dd27      	ble.n	8005aa6 <_strtol_l.constprop.0+0xc6>
 8005a56:	1c57      	adds	r7, r2, #1
 8005a58:	d007      	beq.n	8005a6a <_strtol_l.constprop.0+0x8a>
 8005a5a:	4581      	cmp	r9, r0
 8005a5c:	d320      	bcc.n	8005aa0 <_strtol_l.constprop.0+0xc0>
 8005a5e:	d101      	bne.n	8005a64 <_strtol_l.constprop.0+0x84>
 8005a60:	45a2      	cmp	sl, r4
 8005a62:	db1d      	blt.n	8005aa0 <_strtol_l.constprop.0+0xc0>
 8005a64:	2201      	movs	r2, #1
 8005a66:	fb00 4003 	mla	r0, r0, r3, r4
 8005a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a6e:	e7eb      	b.n	8005a48 <_strtol_l.constprop.0+0x68>
 8005a70:	2c2b      	cmp	r4, #43	@ 0x2b
 8005a72:	bf04      	itt	eq
 8005a74:	782c      	ldrbeq	r4, [r5, #0]
 8005a76:	1c95      	addeq	r5, r2, #2
 8005a78:	e7cf      	b.n	8005a1a <_strtol_l.constprop.0+0x3a>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1da      	bne.n	8005a34 <_strtol_l.constprop.0+0x54>
 8005a7e:	2c30      	cmp	r4, #48	@ 0x30
 8005a80:	bf0c      	ite	eq
 8005a82:	2308      	moveq	r3, #8
 8005a84:	230a      	movne	r3, #10
 8005a86:	e7d5      	b.n	8005a34 <_strtol_l.constprop.0+0x54>
 8005a88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005a8c:	2f19      	cmp	r7, #25
 8005a8e:	d801      	bhi.n	8005a94 <_strtol_l.constprop.0+0xb4>
 8005a90:	3c37      	subs	r4, #55	@ 0x37
 8005a92:	e7de      	b.n	8005a52 <_strtol_l.constprop.0+0x72>
 8005a94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005a98:	2f19      	cmp	r7, #25
 8005a9a:	d804      	bhi.n	8005aa6 <_strtol_l.constprop.0+0xc6>
 8005a9c:	3c57      	subs	r4, #87	@ 0x57
 8005a9e:	e7d8      	b.n	8005a52 <_strtol_l.constprop.0+0x72>
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa4:	e7e1      	b.n	8005a6a <_strtol_l.constprop.0+0x8a>
 8005aa6:	1c53      	adds	r3, r2, #1
 8005aa8:	d108      	bne.n	8005abc <_strtol_l.constprop.0+0xdc>
 8005aaa:	2322      	movs	r3, #34	@ 0x22
 8005aac:	4660      	mov	r0, ip
 8005aae:	f8ce 3000 	str.w	r3, [lr]
 8005ab2:	f1b8 0f00 	cmp.w	r8, #0
 8005ab6:	d0a0      	beq.n	80059fa <_strtol_l.constprop.0+0x1a>
 8005ab8:	1e69      	subs	r1, r5, #1
 8005aba:	e006      	b.n	8005aca <_strtol_l.constprop.0+0xea>
 8005abc:	b106      	cbz	r6, 8005ac0 <_strtol_l.constprop.0+0xe0>
 8005abe:	4240      	negs	r0, r0
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	d099      	beq.n	80059fa <_strtol_l.constprop.0+0x1a>
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1f6      	bne.n	8005ab8 <_strtol_l.constprop.0+0xd8>
 8005aca:	f8c8 1000 	str.w	r1, [r8]
 8005ace:	e794      	b.n	80059fa <_strtol_l.constprop.0+0x1a>
 8005ad0:	08005d12 	.word	0x08005d12

08005ad4 <_strtol_r>:
 8005ad4:	f7ff bf84 	b.w	80059e0 <_strtol_l.constprop.0>

08005ad8 <_strtoul_l.constprop.0>:
 8005ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4686      	mov	lr, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	4e33      	ldr	r6, [pc, #204]	@ (8005bb0 <_strtoul_l.constprop.0+0xd8>)
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ae8:	5d37      	ldrb	r7, [r6, r4]
 8005aea:	f017 0708 	ands.w	r7, r7, #8
 8005aee:	d1f8      	bne.n	8005ae2 <_strtoul_l.constprop.0+0xa>
 8005af0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005af2:	d12f      	bne.n	8005b54 <_strtoul_l.constprop.0+0x7c>
 8005af4:	2701      	movs	r7, #1
 8005af6:	782c      	ldrb	r4, [r5, #0]
 8005af8:	1c85      	adds	r5, r0, #2
 8005afa:	f033 0010 	bics.w	r0, r3, #16
 8005afe:	d109      	bne.n	8005b14 <_strtoul_l.constprop.0+0x3c>
 8005b00:	2c30      	cmp	r4, #48	@ 0x30
 8005b02:	d12c      	bne.n	8005b5e <_strtoul_l.constprop.0+0x86>
 8005b04:	7828      	ldrb	r0, [r5, #0]
 8005b06:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005b0a:	2858      	cmp	r0, #88	@ 0x58
 8005b0c:	d127      	bne.n	8005b5e <_strtoul_l.constprop.0+0x86>
 8005b0e:	2310      	movs	r3, #16
 8005b10:	786c      	ldrb	r4, [r5, #1]
 8005b12:	3502      	adds	r5, #2
 8005b14:	f04f 38ff 	mov.w	r8, #4294967295
 8005b18:	fbb8 f8f3 	udiv	r8, r8, r3
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	fb03 f908 	mul.w	r9, r3, r8
 8005b22:	4630      	mov	r0, r6
 8005b24:	ea6f 0909 	mvn.w	r9, r9
 8005b28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005b2c:	f1bc 0f09 	cmp.w	ip, #9
 8005b30:	d81c      	bhi.n	8005b6c <_strtoul_l.constprop.0+0x94>
 8005b32:	4664      	mov	r4, ip
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	dd2a      	ble.n	8005b8e <_strtoul_l.constprop.0+0xb6>
 8005b38:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005b3c:	d007      	beq.n	8005b4e <_strtoul_l.constprop.0+0x76>
 8005b3e:	4580      	cmp	r8, r0
 8005b40:	d322      	bcc.n	8005b88 <_strtoul_l.constprop.0+0xb0>
 8005b42:	d101      	bne.n	8005b48 <_strtoul_l.constprop.0+0x70>
 8005b44:	45a1      	cmp	r9, r4
 8005b46:	db1f      	blt.n	8005b88 <_strtoul_l.constprop.0+0xb0>
 8005b48:	2601      	movs	r6, #1
 8005b4a:	fb00 4003 	mla	r0, r0, r3, r4
 8005b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b52:	e7e9      	b.n	8005b28 <_strtoul_l.constprop.0+0x50>
 8005b54:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b56:	bf04      	itt	eq
 8005b58:	782c      	ldrbeq	r4, [r5, #0]
 8005b5a:	1c85      	addeq	r5, r0, #2
 8005b5c:	e7cd      	b.n	8005afa <_strtoul_l.constprop.0+0x22>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1d8      	bne.n	8005b14 <_strtoul_l.constprop.0+0x3c>
 8005b62:	2c30      	cmp	r4, #48	@ 0x30
 8005b64:	bf0c      	ite	eq
 8005b66:	2308      	moveq	r3, #8
 8005b68:	230a      	movne	r3, #10
 8005b6a:	e7d3      	b.n	8005b14 <_strtoul_l.constprop.0+0x3c>
 8005b6c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005b70:	f1bc 0f19 	cmp.w	ip, #25
 8005b74:	d801      	bhi.n	8005b7a <_strtoul_l.constprop.0+0xa2>
 8005b76:	3c37      	subs	r4, #55	@ 0x37
 8005b78:	e7dc      	b.n	8005b34 <_strtoul_l.constprop.0+0x5c>
 8005b7a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005b7e:	f1bc 0f19 	cmp.w	ip, #25
 8005b82:	d804      	bhi.n	8005b8e <_strtoul_l.constprop.0+0xb6>
 8005b84:	3c57      	subs	r4, #87	@ 0x57
 8005b86:	e7d5      	b.n	8005b34 <_strtoul_l.constprop.0+0x5c>
 8005b88:	f04f 36ff 	mov.w	r6, #4294967295
 8005b8c:	e7df      	b.n	8005b4e <_strtoul_l.constprop.0+0x76>
 8005b8e:	1c73      	adds	r3, r6, #1
 8005b90:	d106      	bne.n	8005ba0 <_strtoul_l.constprop.0+0xc8>
 8005b92:	2322      	movs	r3, #34	@ 0x22
 8005b94:	4630      	mov	r0, r6
 8005b96:	f8ce 3000 	str.w	r3, [lr]
 8005b9a:	b932      	cbnz	r2, 8005baa <_strtoul_l.constprop.0+0xd2>
 8005b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ba0:	b107      	cbz	r7, 8005ba4 <_strtoul_l.constprop.0+0xcc>
 8005ba2:	4240      	negs	r0, r0
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	d0f9      	beq.n	8005b9c <_strtoul_l.constprop.0+0xc4>
 8005ba8:	b106      	cbz	r6, 8005bac <_strtoul_l.constprop.0+0xd4>
 8005baa:	1e69      	subs	r1, r5, #1
 8005bac:	6011      	str	r1, [r2, #0]
 8005bae:	e7f5      	b.n	8005b9c <_strtoul_l.constprop.0+0xc4>
 8005bb0:	08005d12 	.word	0x08005d12

08005bb4 <_strtoul_r>:
 8005bb4:	f7ff bf90 	b.w	8005ad8 <_strtoul_l.constprop.0>

08005bb8 <_malloc_usable_size_r>:
 8005bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bbc:	1f18      	subs	r0, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfbc      	itt	lt
 8005bc2:	580b      	ldrlt	r3, [r1, r0]
 8005bc4:	18c0      	addlt	r0, r0, r3
 8005bc6:	4770      	bx	lr

08005bc8 <_init>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	bf00      	nop
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr

08005bd4 <_fini>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	bf00      	nop
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr
